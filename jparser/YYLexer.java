/* The following code was generated by JFlex 1.4.3 on 1/18/12 6:27 PM */

package jthrift.jparser;

class sym {
    public static final int EOF = YYParser.EOF;
}

class K {
      static Context c = Context.getInstance();
      static java_cup.runtime.Symbol s(int dex) {
        return new java_cup.runtime.Symbol(dex);
      }
      static java_cup.runtime.Symbol s(int dex,
          java_cup.runtime.YYLVal lv) {
        return new java_cup.runtime.Symbol(dex, lv);
      }
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */


/**
 * Helper definitions, comments, constants, and whatnot
 */


class YYLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\14\2\0\1\11\22\0\1\11\1\0\1\21\1\15"+
    "\3\0\1\21\2\16\1\13\1\1\1\16\1\17\1\6\1\12\1\3"+
    "\1\50\1\53\1\52\1\54\1\2\1\51\3\2\5\16\2\0\1\66"+
    "\1\57\1\64\1\63\1\7\1\5\1\60\1\75\1\61\2\20\1\65"+
    "\1\74\1\62\1\73\1\76\1\20\1\70\1\67\1\72\1\71\5\20"+
    "\1\16\1\0\1\16\1\0\1\10\1\0\1\23\1\47\1\35\1\37"+
    "\1\26\1\22\1\44\1\46\1\36\1\41\1\43\1\24\1\33\1\32"+
    "\1\45\1\34\1\56\1\30\1\25\1\27\1\31\1\42\1\55\1\4"+
    "\1\40\1\77\1\16\1\0\1\16\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\2\5\1\2\2\5\1\1"+
    "\1\2\1\6\1\1\1\3\1\7\26\5\3\0\1\10"+
    "\2\5\1\3\1\0\1\3\1\10\3\5\1\0\1\4"+
    "\2\10\6\5\1\11\51\5\2\11\6\5\1\11\20\5"+
    "\1\3\1\12\1\5\1\3\6\5\2\0\1\3\4\5"+
    "\1\11\11\5\1\13\17\5\1\11\23\5\1\14\22\5"+
    "\1\15\1\16\1\17\2\11\33\5\2\0\1\1\1\0"+
    "\10\5\1\20\13\5\1\11\1\5\1\21\5\5\1\22"+
    "\43\5\1\23\5\5\1\24\1\25\12\5\1\0\1\1"+
    "\3\0\1\26\2\5\1\27\2\5\1\30\1\5\1\31"+
    "\12\5\1\11\4\5\1\32\11\5\1\33\27\5\1\0"+
    "\1\1\1\34\2\0\3\5\1\35\1\36\3\5\1\11"+
    "\2\5\1\37\22\5\1\40\1\5\1\41\1\5\1\42"+
    "\1\43\6\5\1\11\1\5\1\34\1\44\2\5\1\45"+
    "\2\5\1\46\14\5\1\47\15\5\1\50\6\5\1\51"+
    "\6\5\1\52\1\53\7\5\1\54\1\5\1\55\1\5"+
    "\1\56\36\5\1\57\4\5\1\60\1\61\3\5\1\62"+
    "\3\5\1\63\1\5\1\64\1\65\3\5\1\66\1\5"+
    "\1\67\3\5\1\70\6\5\1\71\1\5\1\72\1\73"+
    "\1\5\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\200\0\300\0\u0100\0\u0140\0\u0180"+
    "\0\u01c0\0\u0200\0\u0240\0\u0280\0\100\0\u02c0\0\u0300\0\100"+
    "\0\u0340\0\u0380\0\u03c0\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500"+
    "\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700"+
    "\0\u0740\0\u0780\0\u07c0\0\u0800\0\u0840\0\u0880\0\u0180\0\u08c0"+
    "\0\u0900\0\u0940\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0"+
    "\0\u0b00\0\u0b40\0\u0b80\0\u0bc0\0\u0300\0\u0c00\0\u0c40\0\u0c80"+
    "\0\u0cc0\0\u0d00\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u0e80"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040\0\u1080"+
    "\0\u10c0\0\u1100\0\u1140\0\u1180\0\u11c0\0\u1200\0\u1240\0\u1280"+
    "\0\u12c0\0\u1300\0\u1340\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480"+
    "\0\u14c0\0\u1500\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680"+
    "\0\u16c0\0\u1700\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u0140"+
    "\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980\0\u19c0\0\u1a00\0\u1a40"+
    "\0\u1a80\0\u1ac0\0\u1b00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u1c40"+
    "\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0\0\u1e00\0\u1e40"+
    "\0\u0a40\0\u0900\0\u1e80\0\u0ac0\0\u1ec0\0\u1f00\0\u1f40\0\u1f80"+
    "\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0\0\u2100\0\u2140\0\u2180"+
    "\0\u21c0\0\u2200\0\u2240\0\u2280\0\u22c0\0\u2300\0\u2340\0\u2380"+
    "\0\u23c0\0\u2400\0\u2440\0\u0140\0\u2480\0\u24c0\0\u2500\0\u2540"+
    "\0\u2580\0\u25c0\0\u2600\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740"+
    "\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940"+
    "\0\u2980\0\u29c0\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40"+
    "\0\u2b80\0\u2bc0\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u2d00\0\u0140"+
    "\0\u2d40\0\u2d80\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00"+
    "\0\u2f40\0\u2f80\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100"+
    "\0\u3140\0\u3180\0\u0140\0\u0140\0\u0140\0\u31c0\0\u3200\0\u3240"+
    "\0\u3280\0\u32c0\0\u3300\0\u3340\0\u3380\0\u33c0\0\u3400\0\u3440"+
    "\0\u3480\0\u34c0\0\u3500\0\u3540\0\u3580\0\u35c0\0\u3600\0\u3640"+
    "\0\u3680\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840"+
    "\0\u3880\0\u38c0\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00\0\u3a40"+
    "\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u0140\0\u3c00"+
    "\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u3d40\0\u3d80\0\u3dc0\0\u3e00"+
    "\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u0140\0\u3f40\0\u3f80\0\u3fc0"+
    "\0\u4000\0\u4040\0\u0140\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180"+
    "\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380"+
    "\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540\0\u4580"+
    "\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700\0\u4740\0\u4780"+
    "\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900\0\u0140\0\u4940"+
    "\0\u4980\0\u49c0\0\u4a00\0\u4a40\0\u0140\0\u0140\0\u4a80\0\u4ac0"+
    "\0\u4b00\0\u4b40\0\u4b80\0\u4bc0\0\u4c00\0\u4c40\0\u4c80\0\u4cc0"+
    "\0\u4d00\0\100\0\u4d40\0\u4d80\0\u4dc0\0\u0140\0\u4e00\0\u4e40"+
    "\0\u0140\0\u4e80\0\u4ec0\0\u0140\0\u4f00\0\u0140\0\u4f40\0\u4f80"+
    "\0\u4fc0\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140\0\u5180"+
    "\0\u51c0\0\u5200\0\u5240\0\u5280\0\u52c0\0\u0140\0\u5300\0\u5340"+
    "\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480\0\u54c0\0\u5500\0\u0140"+
    "\0\u5540\0\u5580\0\u55c0\0\u5600\0\u5640\0\u5680\0\u56c0\0\u5700"+
    "\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880\0\u58c0\0\u5900"+
    "\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\u5a80\0\u5ac0\0\u5b00"+
    "\0\u5b00\0\100\0\u5b40\0\u3980\0\u5b80\0\u5bc0\0\u5c00\0\u0140"+
    "\0\u0140\0\u5c40\0\u5c80\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u0140"+
    "\0\u5dc0\0\u5e00\0\u5e40\0\u5e80\0\u5ec0\0\u5f00\0\u5f40\0\u5f80"+
    "\0\u5fc0\0\u6000\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180"+
    "\0\u61c0\0\u6200\0\u0140\0\u6240\0\u0140\0\u6280\0\u0140\0\u0140"+
    "\0\u62c0\0\u6300\0\u6340\0\u6380\0\u63c0\0\u6400\0\u0b40\0\u6440"+
    "\0\u3980\0\u0140\0\u6480\0\u64c0\0\u0140\0\u6500\0\u6540\0\u0140"+
    "\0\u6580\0\u65c0\0\u6600\0\u6640\0\u6680\0\u66c0\0\u6700\0\u6740"+
    "\0\u6780\0\u67c0\0\u6800\0\u6840\0\u0140\0\u6880\0\u68c0\0\u6900"+
    "\0\u6940\0\u6980\0\u69c0\0\u6a00\0\u6a40\0\u6a80\0\u6ac0\0\u6b00"+
    "\0\u6b40\0\u6b80\0\u0140\0\u6bc0\0\u6c00\0\u6c40\0\u6c80\0\u6cc0"+
    "\0\u6d00\0\u0140\0\u6d40\0\u6d80\0\u6dc0\0\u6e00\0\u6e40\0\u6e80"+
    "\0\u0140\0\u0140\0\u6ec0\0\u6f00\0\u6f40\0\u6f80\0\u6fc0\0\u7000"+
    "\0\u7040\0\u0140\0\u7080\0\u0140\0\u70c0\0\u0140\0\u7100\0\u7140"+
    "\0\u7180\0\u71c0\0\u7200\0\u7240\0\u7280\0\u72c0\0\u7300\0\u7340"+
    "\0\u7380\0\u73c0\0\u7400\0\u7440\0\u7480\0\u74c0\0\u7500\0\u7540"+
    "\0\u7580\0\u75c0\0\u7600\0\u7640\0\u7680\0\u76c0\0\u7700\0\u7740"+
    "\0\u7780\0\u77c0\0\u7800\0\u7840\0\u0140\0\u7880\0\u78c0\0\u7900"+
    "\0\u7940\0\u0140\0\u0140\0\u7980\0\u79c0\0\u7a00\0\u0140\0\u7a40"+
    "\0\u7a80\0\u7ac0\0\u0140\0\u7b00\0\u0140\0\u0140\0\u7b40\0\u7b80"+
    "\0\u7bc0\0\u0140\0\u7c00\0\u0140\0\u7c40\0\u7c80\0\u7cc0\0\u0140"+
    "\0\u7d00\0\u7d40\0\u7d80\0\u7dc0\0\u7e00\0\u7e40\0\u0140\0\u7e80"+
    "\0\u0140\0\u0140\0\u7ec0\0\u0140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\13\1\16\1\15\1\17"+
    "\1\7\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\7\1\42\1\43\1\7\1\44"+
    "\5\4\1\45\1\7\1\46\20\7\102\0\2\4\2\0"+
    "\1\47\1\50\16\0\1\50\21\0\5\4\25\0\2\4"+
    "\1\51\1\0\1\47\1\50\16\0\1\50\21\0\5\4"+
    "\25\0\7\7\6\0\1\52\1\7\1\0\3\7\1\53"+
    "\17\7\1\54\32\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\56\7\2\0\2\55\44\0\5\55\24\0\1\56"+
    "\2\57\5\7\6\0\1\60\1\7\1\0\26\7\5\57"+
    "\5\7\1\61\15\7\2\0\6\62\1\63\7\0\1\62"+
    "\1\0\56\62\11\0\1\13\2\0\1\13\75\0\1\16"+
    "\1\64\64\0\14\16\1\0\63\16\2\0\2\65\2\52"+
    "\1\66\1\67\1\52\6\0\2\52\1\0\4\52\1\67"+
    "\21\52\5\65\23\52\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\70\1\71\4\7\1\72\4\7\1\73"+
    "\6\7\1\74\32\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\2\7\1\75\1\76\2\7\1\77\1\7\1\100"+
    "\14\7\1\101\30\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\102\12\7\1\103\41\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\2\7\1\104\1\7\1\105"+
    "\1\106\1\7\1\107\1\7\1\110\2\7\1\111\1\7"+
    "\1\112\14\7\1\113\22\7\1\0\1\56\2\57\1\114"+
    "\4\7\6\0\1\60\1\7\1\0\2\7\1\115\5\7"+
    "\1\116\15\7\5\57\23\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\6\7\1\117\7\7\1\120\5\7\1\121"+
    "\31\7\2\0\7\7\6\0\1\52\1\7\1\0\1\7"+
    "\1\122\2\7\1\123\2\7\1\124\46\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\3\7\1\125\4\7\1\126"+
    "\45\7\2\0\7\7\6\0\1\52\1\7\1\0\1\7"+
    "\1\127\2\7\1\130\7\7\1\131\6\7\1\132\32\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\7\1\133"+
    "\21\7\1\134\32\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\135\2\7\1\136\1\7\1\137\1\140"+
    "\6\7\1\141\5\7\1\142\31\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\7\1\143\1\144\1\145\6\7"+
    "\1\146\10\7\1\147\32\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\150\2\7\1\150\4\7\1\151\1\152"+
    "\14\7\1\153\1\154\1\155\25\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\156\11\7\1\157\4\7"+
    "\1\160\32\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\14\7\1\161\41\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\162\54\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\54\12\7\1\163\6\7\1\164"+
    "\32\7\2\0\7\7\6\0\1\52\1\7\1\0\2\7"+
    "\1\165\20\7\1\166\32\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\6\7\1\150\1\7\1\167\1\7\1\170"+
    "\43\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\171\1\7\1\172\5\7\1\173\1\7\1\174\4\7"+
    "\1\175\32\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\14\7\1\176\7\7\1\177\31\7\2\0\5\7\1\200"+
    "\1\7\6\0\1\52\1\7\1\0\56\7\1\0\1\56"+
    "\2\201\13\0\1\56\30\0\5\201\25\0\2\202\1\0"+
    "\1\202\1\0\1\202\12\0\2\202\2\0\1\202\6\0"+
    "\1\202\1\0\1\202\7\0\6\202\2\0\1\202\3\0"+
    "\2\202\1\0\1\202\13\0\7\52\6\0\2\52\1\0"+
    "\56\52\2\0\7\7\6\0\1\52\1\7\1\0\15\7"+
    "\1\203\40\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\6\7\1\150\47\7\2\0\2\55\3\0\1\50\16\0"+
    "\1\50\21\0\5\55\25\0\2\201\44\0\5\201\25\0"+
    "\2\57\5\7\6\0\1\52\1\7\1\0\26\7\5\57"+
    "\23\7\2\0\2\204\5\52\6\0\2\52\1\0\26\52"+
    "\5\204\23\52\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\41\7\1\150\14\7\2\0\7\62\7\0\1\62\1\0"+
    "\56\62\2\0\3\62\1\205\3\62\7\0\1\62\1\0"+
    "\40\62\1\206\1\207\1\210\1\211\6\62\1\212\3\62"+
    "\13\213\1\214\64\213\2\0\2\215\5\52\6\0\2\52"+
    "\1\0\26\52\5\215\23\52\1\0\1\56\2\204\5\52"+
    "\6\0\1\60\1\52\1\0\26\52\5\204\23\52\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\2\7\1\216\53\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\23\7\1\217"+
    "\32\7\2\0\7\7\6\0\1\52\1\7\1\0\10\7"+
    "\1\220\45\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\10\7\1\221\45\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\6\7\1\222\47\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\14\7\1\223\41\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\3\7\1\224\12\7\1\225\37\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\22\7\1\226"+
    "\33\7\2\0\7\7\6\0\1\52\1\7\1\0\15\7"+
    "\1\150\40\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\3\7\1\227\52\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\11\7\1\230\44\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\3\7\1\231\52\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\14\7\1\232\41\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\2\7\1\233\2\7\1\234"+
    "\1\235\1\7\1\236\45\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\237\4\7\1\240\47\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\12\7\1\241\43\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\7\1\242"+
    "\54\7\2\0\7\7\6\0\1\52\1\7\1\0\55\7"+
    "\1\243\2\0\7\7\6\0\1\52\1\7\1\0\10\7"+
    "\1\244\45\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\14\7\1\245\41\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\4\7\1\246\1\247\5\7\1\250\42\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\3\7\1\251\10\7"+
    "\1\233\41\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\3\7\1\252\3\7\1\253\5\7\1\254\40\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\1\7\1\255\5\7"+
    "\1\256\6\7\1\150\37\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\12\7\1\257\43\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\260\1\7\1\261\5\7"+
    "\1\226\41\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\14\7\1\262\41\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\3\7\1\263\1\7\1\264\7\7\1\265\4\7"+
    "\1\266\11\7\1\267\21\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\25\7\1\270\30\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\150\51\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\2\7\1\271\1\272\1\7"+
    "\1\273\6\7\1\274\1\275\40\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\5\7\1\276\3\7\1\277\44\7"+
    "\2\0\2\7\1\132\4\7\6\0\1\52\1\7\1\0"+
    "\33\7\1\150\22\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\2\7\1\150\53\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\5\7\1\150\50\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\12\7\1\300\43\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\15\7\1\301\40\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\3\7\1\226\52\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\6\7\1\302"+
    "\47\7\2\0\7\7\6\0\1\52\1\7\1\0\14\7"+
    "\1\303\6\7\1\304\32\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\25\7\1\305\30\7\2\0\6\7\1\306"+
    "\6\0\1\52\1\7\1\0\56\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\12\7\1\307\43\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\3\7\1\125\1\7\1\310"+
    "\50\7\2\0\7\7\6\0\1\52\1\7\1\0\1\7"+
    "\1\135\21\7\1\311\32\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\24\7\1\312\31\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\12\7\1\313\43\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\10\7\1\314\2\7\1\315"+
    "\42\7\2\0\7\7\6\0\1\52\1\7\1\0\2\7"+
    "\1\316\1\317\1\7\1\320\5\7\1\321\42\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\12\7\1\322\43\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\27\7\1\323"+
    "\26\7\2\0\7\7\6\0\1\52\1\7\1\0\32\7"+
    "\1\324\23\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\31\7\1\325\24\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\326\1\7\1\327\10\7\1\330\42\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\10\7\1\331\45\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\7\7\1\332"+
    "\46\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\333\51\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\20\7\1\334\35\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\6\7\1\335\47\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\2\7\1\336\11\7\1\337\41\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\23\7\1\340\32\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\5\7\1\265"+
    "\50\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\341\51\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\5\7\1\342\50\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\22\7\1\343\33\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\344\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\10\7\1\345\45\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\5\7\1\346\50\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\23\7\1\347\32\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\5\7\1\350"+
    "\50\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\260\7\7\1\351\41\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\36\7\1\352\17\7\2\0\6\7\1\353"+
    "\6\0\1\52\1\7\1\0\56\7\2\0\7\62\7\0"+
    "\1\62\1\0\37\62\1\354\7\62\1\355\6\62\2\0"+
    "\7\62\7\0\1\62\1\0\44\62\1\356\11\62\2\0"+
    "\7\62\7\0\1\62\1\0\37\62\1\357\16\62\2\0"+
    "\7\62\7\0\1\62\1\0\43\62\1\360\12\62\2\0"+
    "\7\62\7\0\1\62\1\0\37\62\1\361\16\62\2\0"+
    "\5\62\1\362\1\62\7\0\1\62\1\0\56\62\13\213"+
    "\1\363\64\213\12\364\1\365\1\366\64\364\2\0\2\215"+
    "\3\52\1\67\1\52\6\0\2\52\1\0\4\52\1\67"+
    "\21\52\5\215\23\52\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\3\7\1\367\52\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\132\54\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\13\7\1\370\42\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\1\7\1\371\54\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\4\7\1\372\51\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\7\1\226"+
    "\54\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\373\51\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\10\7\1\374\45\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\3\7\1\150\52\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\5\7\1\375\50\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\25\7\1\376\30\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\5\7\1\377\50\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\3\7\1\u0100\52\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\150\55\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\20\7\1\u0101"+
    "\35\7\2\0\7\7\6\0\1\52\1\7\1\0\7\7"+
    "\1\u0102\46\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\5\7\1\u0103\50\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\7\7\1\u0104\4\7\1\u0105\41\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\54\51\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\2\7\1\u0106\53\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\4\7\1\u0107"+
    "\51\7\2\0\7\7\6\0\1\52\1\7\1\0\13\7"+
    "\1\u0108\42\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\5\7\1\310\50\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\13\7\1\150\42\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\u0109\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\u010a\51\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\u010b\7\7\1\233"+
    "\41\7\2\0\7\7\6\0\1\52\1\7\1\0\7\7"+
    "\1\u010c\46\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\11\7\1\u010d\44\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\u010e\2\7\1\u010f\10\7\1\233\1\u0110\15\7"+
    "\1\u0111\22\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\10\7\1\u0112\45\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\4\7\1\u0113\51\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\u0114\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\10\7\1\150\45\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\23\7\1\u0115\32\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\3\7\1\125\52\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\13\7\1\u0116"+
    "\42\7\2\0\7\7\6\0\1\52\1\7\1\0\6\7"+
    "\1\u0117\1\u0118\46\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\23\7\1\150\32\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\14\7\1\u0119\41\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\7\7\1\u011a\46\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\16\7\1\u011b\37\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\4\7\1\135\51\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\14\7\1\u011c"+
    "\41\7\2\0\7\7\6\0\1\52\1\7\1\0\14\7"+
    "\1\131\41\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\23\7\1\u011d\32\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\4\7\1\233\51\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\14\7\1\u011e\41\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\u011f\51\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\7\7\1\351\46\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\2\7\1\u0120\53\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\10\7\1\132"+
    "\7\7\1\u0121\35\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\5\7\1\u0122\50\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\2\7\1\u0103\53\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\11\7\1\u0123\44\7\2\0\6\7"+
    "\1\u0124\6\0\1\52\1\7\1\0\56\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\13\7\1\350\42\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\10\7\1\125\45\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\7\1\u0125"+
    "\54\7\2\0\6\7\1\u0126\6\0\1\52\1\7\1\0"+
    "\56\7\2\0\7\7\6\0\1\52\1\7\1\0\3\7"+
    "\1\u0127\1\7\1\u0128\50\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\23\7\1\u0129\32\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\14\7\1\311\41\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\5\7\1\u012a\50\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\4\7\1\u012b\51\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\2\7\1\u012c"+
    "\53\7\2\0\7\7\6\0\1\52\1\7\1\0\2\7"+
    "\1\u012d\20\7\1\373\32\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\u012e\54\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\u012f\5\7\1\u0130\43\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\2\7\1\u0131"+
    "\53\7\2\0\7\7\6\0\1\52\1\7\1\0\1\7"+
    "\1\u0132\54\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\25\7\1\u0133\30\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\2\7\1\100\53\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\u0134\54\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\5\7\1\u0135\50\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\1\7\1\u0136\54\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\15\7\1\u0137\40\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\25\7\1\u0138"+
    "\30\7\2\0\7\7\6\0\1\52\1\7\1\0\33\7"+
    "\1\u0139\22\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\14\7\1\u013a\41\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\14\7\1\260\41\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\u013b\54\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\7\1\u013c\54\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\u013d\51\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\2\7\1\u013e\53\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\24\7\1\150"+
    "\31\7\2\0\7\7\6\0\1\52\1\7\1\0\2\7"+
    "\1\125\53\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\37\7\1\u013f\16\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\u0140\6\7\1\u0141\12\7\1\u0142\32\7"+
    "\2\0\7\62\7\0\1\62\1\0\43\62\1\u0143\12\62"+
    "\2\0\7\62\7\0\1\62\1\0\40\62\1\u0144\15\62"+
    "\2\0\7\62\7\0\1\62\1\0\52\62\1\u0145\3\62"+
    "\2\0\7\62\7\0\1\62\1\0\46\62\1\u0146\7\62"+
    "\2\0\7\62\7\0\1\62\1\0\44\62\1\u0147\11\62"+
    "\2\0\7\62\7\0\1\62\1\0\40\62\1\u0143\15\62"+
    "\2\0\7\62\7\0\1\62\1\0\50\62\1\u0148\5\62"+
    "\12\u0149\1\u014a\1\u014b\64\u0149\13\364\1\u014c\64\364\12\0"+
    "\1\u014d\65\0\12\u014d\1\u014a\1\214\64\u014d\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\u014e\51\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\5\7\1\u014f\50\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\2\7\1\u0150"+
    "\53\7\2\0\7\7\6\0\1\52\1\7\1\0\1\7"+
    "\1\310\54\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\6\7\1\132\47\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\13\7\1\u0151\42\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\6\7\1\u0152\47\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\15\7\1\u0153\40\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\5\7\1\u0154\50\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\14\7\1\u0155\41\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\11\7\1\u0156"+
    "\44\7\2\0\7\7\6\0\1\52\1\7\1\0\14\7"+
    "\1\246\41\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\13\7\1\u0157\42\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\10\7\1\u0158\45\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\2\7\1\u0159\53\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\23\7\1\233\32\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\24\7\1\u015a\31\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\10\7\1\u015b\45\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\12\7\1\u015c"+
    "\43\7\2\0\7\7\6\0\1\52\1\7\1\0\14\7"+
    "\1\233\41\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\6\7\1\125\47\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\23\7\1\74\32\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\33\7\1\113\22\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\u015d\51\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\24\7\1\u015e\31\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\3\7\1\u015f\52\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\15\7\1\u0160"+
    "\40\7\2\0\7\7\6\0\1\52\1\7\1\0\33\7"+
    "\1\u0161\22\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\7\7\1\125\46\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\16\7\1\150\37\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\6\7\1\260\47\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\3\7\1\u0162\52\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\14\7\1\u0163\41\7\2\0"+
    "\6\7\1\u0164\6\0\1\52\1\7\1\0\56\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\22\7\1\u0165\33\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\10\7\1\u0166"+
    "\45\7\2\0\7\7\6\0\1\52\1\7\1\0\20\7"+
    "\1\125\35\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\3\7\1\u0167\52\7\2\0\6\7\1\u0168\6\0\1\52"+
    "\1\7\1\0\56\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\u012f\54\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\u0169\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\23\7\1\u016a\32\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\10\7\1\u016b\45\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\6\7\1\u016c\47\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\5\7\1\u016d"+
    "\2\7\1\u016e\3\7\1\u016f\41\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\5\7\1\u0170\50\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\14\7\1\u0171\41\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\1\7\1\u0172\54\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\7\1\u0173"+
    "\54\7\2\0\7\7\6\0\1\52\1\7\1\0\6\7"+
    "\1\u0174\47\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\7\7\1\u0175\46\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\4\7\1\u0176\51\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\7\7\1\u0177\46\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\5\7\1\125\50\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\24\7\1\u0178\31\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\1\7\1\u010c\54\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\11\7\1\u0103"+
    "\44\7\2\0\7\7\6\0\1\52\1\7\1\0\2\7"+
    "\1\u0179\53\7\2\0\6\7\1\u017a\6\0\1\52\1\7"+
    "\1\0\56\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\7\7\1\u0138\46\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\5\7\1\u015e\50\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\131\54\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\7\1\u017b\54\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\23\7\1\u017c\32\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\21\7\1\150\34\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\6\7\1\u017d"+
    "\47\7\2\0\7\7\6\0\1\52\1\7\1\0\40\7"+
    "\1\150\15\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\2\7\1\u017e\2\7\1\u017f\50\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\7\1\u0180\12\7\1\u0181\41\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\12\7\1\u0182"+
    "\43\7\2\0\5\62\1\u0146\1\62\7\0\1\62\1\0"+
    "\56\62\2\0\7\62\7\0\1\62\1\0\42\62\1\u0183"+
    "\13\62\2\0\5\62\1\u0184\1\62\7\0\1\62\1\0"+
    "\56\62\2\0\6\62\1\u0185\7\0\1\62\1\0\56\62"+
    "\2\0\7\62\7\0\1\62\1\0\45\62\1\u0186\10\62"+
    "\2\0\7\62\7\0\1\62\1\0\53\62\1\u0187\2\62"+
    "\12\213\1\u0188\1\363\76\213\1\u0189\1\363\64\213\12\u014d"+
    "\1\u018a\1\u018b\64\u014d\12\364\1\u018c\1\u014c\64\364\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\14\7\1\u018d\41\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\2\7\1\u0117"+
    "\53\7\2\0\7\7\6\0\1\52\1\7\1\0\1\7"+
    "\1\u018e\54\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\1\7\1\150\54\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\13\7\1\u018f\42\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\5\7\1\u0190\50\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\22\7\1\u0191\33\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\5\7\1\u0192\50\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\6\7\1\u0193\47\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\15\7\1\u0194"+
    "\40\7\2\0\7\7\6\0\1\52\1\7\1\0\5\7"+
    "\1\u0195\50\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\13\7\1\330\42\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\14\7\1\351\41\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\14\7\1\u0196\41\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\u0197\51\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\3\7\1\u0198\52\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\5\7\1\241\50\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\6\7\1\u0199"+
    "\47\7\2\0\7\7\6\0\1\52\1\7\1\0\10\7"+
    "\1\u019a\45\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\10\7\1\u019b\45\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\12\7\1\u019c\43\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\12\7\1\u019d\43\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\13\7\1\u019e\42\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\15\7\1\u019f\40\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\1\7\1\u01a0\54\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\12\7\1\u01a1"+
    "\43\7\2\0\7\7\6\0\1\52\1\7\1\0\16\7"+
    "\1\u01a2\37\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\1\7\1\u01a3\54\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\10\7\1\u01a4\45\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\10\7\1\u0116\45\7\2\0\6\7\1\u01a5"+
    "\6\0\1\52\1\7\1\0\56\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\10\7\1\u01a6\45\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\1\u01a7\55\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\15\7\1\u01a8\40\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\11\7\1\u01a9\44\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\2\7\1\132"+
    "\53\7\2\0\7\7\6\0\1\52\1\7\1\0\14\7"+
    "\1\u01aa\41\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\4\7\1\u01ab\51\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\12\7\1\u01ac\43\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\16\7\1\u01ad\37\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\10\7\1\u01ae\45\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\16\7\1\u01af\37\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\2\7\1\u01b0\53\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\5\7\1\u01b1"+
    "\50\7\2\0\7\7\6\0\1\52\1\7\1\0\11\7"+
    "\1\u01b2\44\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\2\7\1\u01b3\53\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\5\7\1\u01b4\50\7\2\0\7\62\7\0\1\62"+
    "\1\0\50\62\1\u01b5\5\62\2\0\7\62\7\0\1\62"+
    "\1\0\45\62\1\u01b6\10\62\2\0\6\62\1\u01b7\7\0"+
    "\1\62\1\0\56\62\2\0\7\62\7\0\1\62\1\0"+
    "\45\62\1\u0146\10\62\2\0\7\62\7\0\1\62\1\0"+
    "\51\62\1\u01b8\4\62\12\0\1\u0149\65\0\12\364\1\u01b9"+
    "\1\u014c\64\364\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\23\7\1\260\32\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\13\7\1\132\42\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\u01ba\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\7\1\u01bb\54\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\23\7\1\u01bc\32\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\3\7\1\u01bd\52\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\14\7\1\u01be"+
    "\41\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\u01bf\51\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\1\u01c0\55\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\4\7\1\u01c1\51\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\u01c2\54\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\100\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\7\1\u01c3\54\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\1\7\1\u01c4\54\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\5\7\1\u019b\50\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\7\7\1\u01c5"+
    "\46\7\2\0\7\7\6\0\1\52\1\7\1\0\11\7"+
    "\1\u01c6\44\7\2\0\6\7\1\u01c7\6\0\1\52\1\7"+
    "\1\0\56\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\12\7\1\u01c8\43\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\11\7\1\u01c9\44\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\13\7\1\u01ca\42\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\12\7\1\u01cb\43\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\13\7\1\243\42\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\1\7\1\u01cc\54\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\4\7\1\u01cd"+
    "\51\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\u01ce\51\7\2\0\6\7\1\u01cf\6\0\1\52\1\7"+
    "\1\0\56\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\1\7\1\u01d0\54\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\u01d1\54\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\6\7\1\u01d2\47\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\u01d3\51\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\2\7\1\u01d4\53\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\14\7\1\u01d5\41\7"+
    "\2\0\7\62\7\0\1\62\1\0\37\62\1\u01d6\16\62"+
    "\2\0\7\62\7\0\1\62\1\0\54\62\1\u01d7\1\62"+
    "\2\0\7\62\7\0\1\62\1\0\41\62\1\u0146\14\62"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\2\7\1\u01d8"+
    "\53\7\2\0\7\7\6\0\1\52\1\7\1\0\10\7"+
    "\1\u01d9\45\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\23\7\1\u01da\32\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\10\7\1\132\45\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\15\7\1\u01db\40\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\11\7\1\u01dc\44\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\13\7\1\u01dd\42\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\13\7\1\u01de\42\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\2\7\1\u01df"+
    "\53\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\u01e0\51\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\10\7\1\u01e1\45\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\4\7\1\u01e2\51\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\u01e3\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\2\7\1\u01e4\53\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\6\7\1\u01e5\47\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\13\7\1\125\42\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\10\7\1\u01e6"+
    "\45\7\2\0\7\7\6\0\1\52\1\7\1\0\10\7"+
    "\1\u01e7\45\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\13\7\1\u01e8\42\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\2\7\1\u01e9\53\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\3\7\1\u01ea\52\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\3\7\1\u01eb\52\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\1\7\1\u01ec\54\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\23\7\1\u01ed\32\7"+
    "\2\0\7\62\7\0\1\62\1\0\51\62\1\u01ee\4\62"+
    "\2\0\7\62\7\0\1\62\1\0\44\62\1\u01ef\11\62"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\21\7\1\u01f0"+
    "\34\7\2\0\7\7\6\0\1\52\1\7\1\0\14\7"+
    "\1\u01f1\41\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\10\7\1\u01f2\45\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\4\7\1\u01f3\51\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\u01f4\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\21\7\1\u01f5\34\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\u01f6\51\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\3\7\1\u01f7\52\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\7\1\u01f8"+
    "\54\7\2\0\7\7\6\0\1\52\1\7\1\0\3\7"+
    "\1\u01f9\52\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\7\7\1\u01fa\46\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\4\7\1\u01fb\51\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\5\7\1\226\50\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\7\1\u01fc\54\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\21\7\1\u01fd\34\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\12\7\1\u01fe\43\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\25\7\1\u01ff"+
    "\30\7\2\0\7\7\6\0\1\52\1\7\1\0\10\7"+
    "\1\u0200\45\7\2\0\7\62\7\0\1\62\1\0\40\62"+
    "\1\u0146\15\62\2\0\7\62\7\0\1\62\1\0\42\62"+
    "\1\u0143\13\62\2\0\6\7\1\u0201\6\0\1\52\1\7"+
    "\1\0\56\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\55\7\1\u019b\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\3\7\1\u0202\52\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\u0203\54\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\12\7\1\u0204\43\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\11\7\1\u0205\44\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\12\7\1\u0206\43\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\15\7\1\u0207\40\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\u0208\55\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\11\7\1\u0209"+
    "\44\7\2\0\7\7\6\0\1\52\1\7\1\0\1\7"+
    "\1\u020a\54\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\1\7\1\u020b\54\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\2\7\1\u020c\53\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\u020d\54\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\12\7\1\u020e\1\u020f\42\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\12\7\1\u0210\43\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\22\7\1\u0211"+
    "\33\7\2\0\7\7\6\0\1\52\1\7\1\0\1\7"+
    "\1\u0212\54\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\4\7\1\u0213\51\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\1\7\1\u0214\54\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\u0215\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\14\7\1\u0216\41\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\u0217\51\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\22\7\1\u0218\33\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\13\7\1\u0219"+
    "\42\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\u021a\51\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\2\7\1\u021b\53\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\6\7\1\u021c\47\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\1\7\1\u021d\54\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\7\1\u021e\54\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\u021f\51\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\13\7\1\u0220\42\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\3\7\1\u0221"+
    "\52\7\2\0\7\7\6\0\1\52\1\7\1\0\13\7"+
    "\1\u0222\42\7\2\0\2\7\1\u0223\4\7\6\0\1\52"+
    "\1\7\1\0\56\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\3\7\1\u0224\52\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\4\7\1\u0225\51\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\u0226\51\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\u0227\51\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\5\7\1\u0228\50\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\13\7\1\u0229"+
    "\42\7\2\0\7\7\6\0\1\52\1\7\1\0\4\7"+
    "\1\u022a\51\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\12\7\1\u022b\43\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\4\7\1\u022c\51\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\12\7\1\u022d\43\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\1\u022e\55\7\2\0\7\7\6\0"+
    "\1\52\1\7\1\0\4\7\1\u022f\51\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\4\7\1\u0230\51\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\1\7\1\u0231\54\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\1\7\1\u0232"+
    "\54\7\2\0\7\7\6\0\1\52\1\7\1\0\14\7"+
    "\1\u0233\41\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\22\7\1\u0234\33\7\2\0\7\7\6\0\1\52\1\7"+
    "\1\0\13\7\1\u0235\42\7\2\0\7\7\6\0\1\52"+
    "\1\7\1\0\13\7\1\u0236\42\7\2\0\2\7\1\u0237"+
    "\4\7\6\0\1\52\1\7\1\0\56\7\2\0\7\7"+
    "\6\0\1\52\1\7\1\0\23\7\1\u0238\32\7\2\0"+
    "\7\7\6\0\1\52\1\7\1\0\4\7\1\u0239\51\7"+
    "\2\0\7\7\6\0\1\52\1\7\1\0\4\7\1\u023a"+
    "\51\7\2\0\7\7\6\0\1\52\1\7\1\0\6\7"+
    "\1\u023b\47\7\2\0\7\7\6\0\1\52\1\7\1\0"+
    "\16\7\1\u023c\37\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32512];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\12\1\1\11\2\1\1\11\26\1\3\0"+
    "\4\1\1\0\5\1\1\0\126\1\2\0\146\1\2\0"+
    "\1\1\1\0\122\1\1\0\1\11\3\0\72\1\1\0"+
    "\1\1\1\11\2\0\260\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[572];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YYLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  YYLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* do nothing */
          }
        case 61: break;
        case 6: 
          { return K.s(yytext().charAt(0));
          }
        case 62: break;
        case 44: 
          { return K.s(YYParser.tok_xception);
          }
        case 63: break;
        case 10: 
          { return K.s(YYParser.tok_int_constant,
      new java_cup.runtime.YYLVal(Long.parseLong(yytext().substring(2), 16)));
          }
        case 64: break;
        case 9: 
          { K.c.thriftReservedKeyword(yytext());
          }
        case 65: break;
        case 41: 
          { return K.s(YYParser.tok_cpp_type);
          }
        case 66: break;
        case 37: 
          { return K.s(YYParser.tok_extends);
          }
        case 67: break;
        case 24: 
          { return K.s(YYParser.tok_slist);
          }
        case 68: break;
        case 19: 
          { return K.s(YYParser.tok_void);
          }
        case 69: break;
        case 38: 
          { return K.s(YYParser.tok_typedef);
          }
        case 70: break;
        case 47: 
          { return K.s(YYParser.tok_cpp_include);
          }
        case 71: break;
        case 26: 
          { return K.s(YYParser.tok_union);
          }
        case 72: break;
        case 46: 
          { return K.s(YYParser.tok_py_module);
          }
        case 73: break;
        case 18: 
          { return K.s(YYParser.tok_int_constant, new java_cup.runtime.YYLVal(1));
          }
        case 74: break;
        case 27: 
          { return K.s(YYParser.tok_const);
          }
        case 75: break;
        case 55: 
          { return K.s(YYParser.tok_cpp_namespace);
          }
        case 76: break;
        case 39: 
          { return K.s(YYParser.tok_include);
          }
        case 77: break;
        case 12: 
          { return K.s(YYParser.tok_map);
          }
        case 78: break;
        case 32: 
          { return K.s(YYParser.tok_double);
          }
        case 79: break;
        case 29: 
          { return K.s(YYParser.tok_struct);
          }
        case 80: break;
        case 33: 
          { return K.s(YYParser.tok_oneway);
          }
        case 81: break;
        case 60: 
          { return K.s(YYParser.tok_smalltalk_category);
          }
        case 82: break;
        case 31: 
          { return K.s(YYParser.tok_throws);
          }
        case 83: break;
        case 56: 
          { return K.s(YYParser.tok_ruby_namespace);
          }
        case 84: break;
        case 35: 
          { return K.s(YYParser.tok_xsd_all);
          }
        case 85: break;
        case 50: 
          { return K.s(YYParser.tok_perl_package);
          }
        case 86: break;
        case 54: 
          { return K.s(YYParser.tok_php_namespace);
          }
        case 87: break;
        case 21: 
          { return K.s(YYParser.tok_bool);
          }
        case 88: break;
        case 42: 
          { return K.s(YYParser.tok_optional);
          }
        case 89: break;
        case 13: 
          { return K.s(YYParser.tok_i16);
          }
        case 90: break;
        case 48: 
          { return K.s(YYParser.tok_xsd_nillable);
          }
        case 91: break;
        case 58: 
          { return K.s(YYParser.tok_csharp_namespace);
          }
        case 92: break;
        case 3: 
          { return K.s(YYParser.tok_dub_constant,
      new java_cup.runtime.YYLVal(Double.parseDouble(yytext())));
          }
        case 93: break;
        case 20: 
          { return K.s(YYParser.tok_byte);
          }
        case 94: break;
        case 40: 
          { return K.s(YYParser.tok_required);
          }
        case 95: break;
        case 57: 
          { return K.s(YYParser.tok_smalltalk_prefix);
          }
        case 96: break;
        case 52: 
          { return K.s(YYParser.tok_java_package);
          }
        case 97: break;
        case 17: 
          { return K.s(YYParser.tok_enum);
          }
        case 98: break;
        case 23: 
          { K.c.pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return K.s(YYParser.tok_oneway);
          }
        case 99: break;
        case 4: 
          { return K.s(YYParser.tok_int_constant,
      new java_cup.runtime.YYLVal(Long.parseLong(yytext())));
          }
        case 100: break;
        case 30: 
          { return K.s(YYParser.tok_string);
          }
        case 101: break;
        case 8: 
          { return K.s(YYParser.tok_st_identifier,
      new java_cup.runtime.YYLVal(yytext()));
          }
        case 102: break;
        case 5: 
          { return K.s(YYParser.tok_identifier,
      new java_cup.runtime.YYLVal(yytext()));
          }
        case 103: break;
        case 59: 
          { return K.s(YYParser.tok_delphi_namespace);
          }
        case 104: break;
        case 51: 
          { return K.s(YYParser.tok_cocoa_prefix);
          }
        case 105: break;
        case 14: 
          { return K.s(YYParser.tok_i64);
          }
        case 106: break;
        case 15: 
          { return K.s(YYParser.tok_i32);
          }
        case 107: break;
        case 45: 
          { return K.s(YYParser.tok_namespace);
          }
        case 108: break;
        case 25: 
          { return K.s(YYParser.tok_senum);
          }
        case 109: break;
        case 7: 
          { String text = yytext();
  StringBuffer result = new StringBuffer();
  for(int i = 0; i < text.length(); ++i)
  {
    char ch = text.charAt(i);
    switch (ch) {
      case '\n':
        System.err.println("End of line while read string at "+(yyline-1)+"\n");
        System.exit(1);
      case '\\':
        ++i; ch = text.charAt(i);
        switch (ch) {
          case 'r':
            result.append('\r');
            continue;
          case 'n':
            result.append('\n');
            continue;
          case 't':
            result.append('\t');
            continue;
          case '"':
            result.append('"');
            continue;
          case '\'':
            result.append('\'');
            continue;
          case '\\':
            result.append('\\');
            continue;
          default:
	    throw new IllegalArgumentException("Bad escape character: "+ch);
      }
      default:
        result.append(ch);
    }
  }
  return K.s(YYParser.tok_literal,
    new java_cup.runtime.YYLVal(result.toString()));
          }
        case 110: break;
        case 11: 
          { return K.s(YYParser.tok_set);
          }
        case 111: break;
        case 22: 
          { return K.s(YYParser.tok_int_constant, new java_cup.runtime.YYLVal(0));
          }
        case 112: break;
        case 49: 
          { return K.s(YYParser.tok_xsd_optional);
          }
        case 113: break;
        case 53: 
          { return K.s(YYParser.tok_xsd_namespace);
          }
        case 114: break;
        case 43: 
          { return K.s(YYParser.tok_xsd_attrs);
          }
        case 115: break;
        case 16: 
          { return K.s(YYParser.tok_list);
          }
        case 116: break;
        case 2: 
          { K.c.unexpectedToken(yytext());
          }
        case 117: break;
        case 28: 
          { /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (K.c.parseMode == Context.ParseMode.PROGRAM) {
    // TODO - un-hack
    K.c.clear_doctext();
    K.c.doctext = new String(yytext());
    //K.c.doctext = clean_up_doctext(g_doctext);
    K.c.doctextLineno = yyline;
  }
          }
        case 118: break;
        case 36: 
          { return K.s(YYParser.tok_service);
          }
        case 119: break;
        case 34: 
          { return K.s(YYParser.tok_binary);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
