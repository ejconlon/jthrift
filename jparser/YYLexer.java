/* The following code was generated by JFlex 1.4.3 on 1/17/12 9:10 PM */

package jthrift.jparser;

class sym {
    public static final int EOF = YYParser.EOF;
}

class K {
      static Context c = Context.getInstance();
      static java_cup.runtime.Symbol s(int dex) {
        return new java_cup.runtime.Symbol(dex);
      }
      static java_cup.runtime.Symbol s(int dex,
          java_cup.runtime.YYLVal lv) {
        return new java_cup.runtime.Symbol(dex, lv);
      }
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */


/**
 * Helper definitions, comments, constants, and whatnot
 */


class YYLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\11\1\14\2\0\1\11\22\0\1\11\1\0\1\20\1\15"+
    "\3\0\1\20\2\0\1\13\1\1\1\0\1\16\1\6\1\12\1\3"+
    "\1\47\1\52\1\51\1\53\1\2\1\50\3\2\5\0\2\0\1\65"+
    "\1\56\1\63\1\62\1\7\1\5\1\57\1\74\1\60\2\17\1\64"+
    "\1\73\1\61\1\72\1\75\1\17\1\67\1\66\1\71\1\70\5\17"+
    "\1\0\1\0\1\0\1\0\1\10\1\0\1\22\1\46\1\34\1\36"+
    "\1\25\1\21\1\43\1\45\1\35\1\40\1\42\1\23\1\32\1\31"+
    "\1\44\1\33\1\55\1\27\1\24\1\26\1\30\1\41\1\54\1\4"+
    "\1\37\1\76\1\0\1\0\1\0\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\2\4\2\5\1\2\2\5\1\1"+
    "\1\2\1\1\1\3\1\6\26\5\3\0\1\7\2\5"+
    "\1\3\1\0\1\3\1\7\3\5\1\0\1\4\2\7"+
    "\6\5\1\10\51\5\2\10\6\5\1\10\20\5\1\3"+
    "\1\11\1\5\1\3\6\5\2\0\1\3\4\5\1\10"+
    "\11\5\1\12\17\5\1\10\23\5\1\13\22\5\1\14"+
    "\1\15\1\16\2\10\33\5\2\0\1\1\1\0\10\5"+
    "\1\17\13\5\1\10\1\5\1\20\5\5\1\21\43\5"+
    "\1\22\5\5\1\23\1\24\12\5\1\0\1\1\3\0"+
    "\1\25\2\5\1\26\2\5\1\27\1\5\1\30\12\5"+
    "\1\10\4\5\1\31\11\5\1\32\27\5\1\0\1\1"+
    "\1\33\2\0\3\5\1\34\1\35\3\5\1\10\2\5"+
    "\1\36\22\5\1\37\1\5\1\40\1\5\1\41\1\42"+
    "\6\5\1\10\1\5\1\33\1\43\2\5\1\44\2\5"+
    "\1\45\14\5\1\46\15\5\1\47\6\5\1\50\6\5"+
    "\1\51\1\52\7\5\1\53\1\5\1\54\1\5\1\55"+
    "\36\5\1\56\4\5\1\57\1\60\3\5\1\61\3\5"+
    "\1\62\1\5\1\63\1\64\3\5\1\65\1\5\1\66"+
    "\3\5\1\67\6\5\1\70\1\5\1\71\1\72\1\5"+
    "\1\73";

  private static int [] zzUnpackAction() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\176\0\176\0\275\0\374\0\u013b\0\u017a"+
    "\0\u01b9\0\u01f8\0\u0237\0\u0276\0\u02b5\0\u02f4\0\77\0\u0333"+
    "\0\u0372\0\u03b1\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\u052b"+
    "\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666\0\u06a5\0\u06e4\0\u0723"+
    "\0\u0762\0\u07a1\0\u07e0\0\u081f\0\u085e\0\u017a\0\u089d\0\u08dc"+
    "\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17\0\u0a56\0\u0a95\0\u0ad4"+
    "\0\u0b13\0\u0b52\0\u0b91\0\u02f4\0\u0bd0\0\u0c0f\0\u0c4e\0\u0c8d"+
    "\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89\0\u0dc8\0\u0e07\0\u0e46\0\u0e85"+
    "\0\u0ec4\0\u0f03\0\u0f42\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d"+
    "\0\u10bc\0\u10fb\0\u113a\0\u1179\0\u11b8\0\u11f7\0\u1236\0\u1275"+
    "\0\u12b4\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d"+
    "\0\u14ac\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665"+
    "\0\u16a4\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u013b\0\u181e"+
    "\0\u185d\0\u189c\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16"+
    "\0\u1a55\0\u1a94\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e"+
    "\0\u1c4d\0\u1c8c\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u0a17"+
    "\0\u08dc\0\u1e06\0\u0a95\0\u1e45\0\u1e84\0\u1ec3\0\u1f02\0\u1f41"+
    "\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c\0\u20bb\0\u20fa\0\u2139"+
    "\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274\0\u22b3\0\u22f2\0\u2331"+
    "\0\u2370\0\u23af\0\u013b\0\u23ee\0\u242d\0\u246c\0\u24ab\0\u24ea"+
    "\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664\0\u26a3\0\u26e2"+
    "\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c\0\u289b\0\u28da"+
    "\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54\0\u2a93\0\u2ad2"+
    "\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c\0\u013b\0\u2c8b"+
    "\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44\0\u2e83"+
    "\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c\0\u307b"+
    "\0\u30ba\0\u013b\0\u013b\0\u013b\0\u30f9\0\u3138\0\u3177\0\u31b6"+
    "\0\u31f5\0\u3234\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae"+
    "\0\u33ed\0\u342c\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6"+
    "\0\u35e5\0\u3624\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e"+
    "\0\u37dd\0\u381c\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996"+
    "\0\u39d5\0\u3a14\0\u3a53\0\u3a92\0\u3ad1\0\u013b\0\u3b10\0\u3b4f"+
    "\0\u3b8e\0\u3bcd\0\u3c0c\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47"+
    "\0\u3d86\0\u3dc5\0\u3e04\0\u013b\0\u3e43\0\u3e82\0\u3ec1\0\u3f00"+
    "\0\u3f3f\0\u013b\0\u3f7e\0\u3fbd\0\u3ffc\0\u403b\0\u407a\0\u40b9"+
    "\0\u40f8\0\u4137\0\u4176\0\u41b5\0\u41f4\0\u4233\0\u4272\0\u42b1"+
    "\0\u42f0\0\u432f\0\u436e\0\u43ad\0\u43ec\0\u442b\0\u446a\0\u44a9"+
    "\0\u44e8\0\u4527\0\u4566\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1"+
    "\0\u46e0\0\u471f\0\u475e\0\u479d\0\u47dc\0\u013b\0\u481b\0\u485a"+
    "\0\u4899\0\u48d8\0\u4917\0\u013b\0\u013b\0\u4956\0\u4995\0\u49d4"+
    "\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e\0\u4b8d\0\u4bcc"+
    "\0\77\0\u4c0b\0\u4c4a\0\u4c89\0\u013b\0\u4cc8\0\u4d07\0\u013b"+
    "\0\u4d46\0\u4d85\0\u013b\0\u4dc4\0\u013b\0\u4e03\0\u4e42\0\u4e81"+
    "\0\u4ec0\0\u4eff\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\u5079"+
    "\0\u50b8\0\u50f7\0\u5136\0\u5175\0\u013b\0\u51b4\0\u51f3\0\u5232"+
    "\0\u5271\0\u52b0\0\u52ef\0\u532e\0\u536d\0\u53ac\0\u013b\0\u53eb"+
    "\0\u542a\0\u5469\0\u54a8\0\u54e7\0\u5526\0\u5565\0\u55a4\0\u55e3"+
    "\0\u5622\0\u5661\0\u56a0\0\u56df\0\u571e\0\u575d\0\u579c\0\u57db"+
    "\0\u581a\0\u5859\0\u5898\0\u58d7\0\u5916\0\u5955\0\u5994\0\u5994"+
    "\0\77\0\u59d3\0\u389a\0\u5a12\0\u5a51\0\u5a90\0\u013b\0\u013b"+
    "\0\u5acf\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\u013b\0\u5c49"+
    "\0\u5c88\0\u5cc7\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u5e41"+
    "\0\u5e80\0\u5ebf\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039"+
    "\0\u6078\0\u013b\0\u60b7\0\u013b\0\u60f6\0\u013b\0\u013b\0\u6135"+
    "\0\u6174\0\u61b3\0\u61f2\0\u6231\0\u6270\0\u0b13\0\u62af\0\u389a"+
    "\0\u013b\0\u62ee\0\u632d\0\u013b\0\u636c\0\u63ab\0\u013b\0\u63ea"+
    "\0\u6429\0\u6468\0\u64a7\0\u64e6\0\u6525\0\u6564\0\u65a3\0\u65e2"+
    "\0\u6621\0\u6660\0\u669f\0\u013b\0\u66de\0\u671d\0\u675c\0\u679b"+
    "\0\u67da\0\u6819\0\u6858\0\u6897\0\u68d6\0\u6915\0\u6954\0\u6993"+
    "\0\u69d2\0\u013b\0\u6a11\0\u6a50\0\u6a8f\0\u6ace\0\u6b0d\0\u6b4c"+
    "\0\u013b\0\u6b8b\0\u6bca\0\u6c09\0\u6c48\0\u6c87\0\u6cc6\0\u013b"+
    "\0\u013b\0\u6d05\0\u6d44\0\u6d83\0\u6dc2\0\u6e01\0\u6e40\0\u6e7f"+
    "\0\u013b\0\u6ebe\0\u013b\0\u6efd\0\u013b\0\u6f3c\0\u6f7b\0\u6fba"+
    "\0\u6ff9\0\u7038\0\u7077\0\u70b6\0\u70f5\0\u7134\0\u7173\0\u71b2"+
    "\0\u71f1\0\u7230\0\u726f\0\u72ae\0\u72ed\0\u732c\0\u736b\0\u73aa"+
    "\0\u73e9\0\u7428\0\u7467\0\u74a6\0\u74e5\0\u7524\0\u7563\0\u75a2"+
    "\0\u75e1\0\u7620\0\u765f\0\u013b\0\u769e\0\u76dd\0\u771c\0\u775b"+
    "\0\u013b\0\u013b\0\u779a\0\u77d9\0\u7818\0\u013b\0\u7857\0\u7896"+
    "\0\u78d5\0\u013b\0\u7914\0\u013b\0\u013b\0\u7953\0\u7992\0\u79d1"+
    "\0\u013b\0\u7a10\0\u013b\0\u7a4f\0\u7a8e\0\u7acd\0\u013b\0\u7b0c"+
    "\0\u7b4b\0\u7b8a\0\u7bc9\0\u7c08\0\u7c47\0\u013b\0\u7c86\0\u013b"+
    "\0\u013b\0\u7cc5\0\u013b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\2\1\13\1\15\1\16\1\7"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\7\1\41\1\42\1\7\1\43\5\4"+
    "\1\44\1\7\1\45\20\7\101\0\2\4\2\0\1\46"+
    "\1\47\15\0\1\47\21\0\5\4\25\0\2\4\1\50"+
    "\1\0\1\46\1\47\15\0\1\47\21\0\5\4\25\0"+
    "\7\7\5\0\1\51\1\7\1\0\3\7\1\52\17\7"+
    "\1\53\32\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\56\7\2\0\2\54\43\0\5\54\24\0\1\55\2\56"+
    "\5\7\5\0\1\57\1\7\1\0\26\7\5\56\5\7"+
    "\1\60\15\7\2\0\6\61\1\62\6\0\1\61\1\0"+
    "\56\61\11\0\1\13\2\0\1\13\74\0\1\15\1\63"+
    "\63\0\14\15\1\0\62\15\2\0\2\64\2\51\1\65"+
    "\1\66\1\51\5\0\2\51\1\0\4\51\1\66\21\51"+
    "\5\64\23\51\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\67\1\70\4\7\1\71\4\7\1\72\6\7"+
    "\1\73\32\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\2\7\1\74\1\75\2\7\1\76\1\7\1\77\14\7"+
    "\1\100\30\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\101\12\7\1\102\41\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\2\7\1\103\1\7\1\104\1\105"+
    "\1\7\1\106\1\7\1\107\2\7\1\110\1\7\1\111"+
    "\14\7\1\112\22\7\1\0\1\55\2\56\1\113\4\7"+
    "\5\0\1\57\1\7\1\0\2\7\1\114\5\7\1\115"+
    "\15\7\5\56\23\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\6\7\1\116\7\7\1\117\5\7\1\120\31\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\1\7\1\121"+
    "\2\7\1\122\2\7\1\123\46\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\3\7\1\124\4\7\1\125\45\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\1\7\1\126"+
    "\2\7\1\127\7\7\1\130\6\7\1\131\32\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\7\1\132\21\7"+
    "\1\133\32\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\134\2\7\1\135\1\7\1\136\1\137\6\7"+
    "\1\140\5\7\1\141\31\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\7\1\142\1\143\1\144\6\7\1\145"+
    "\10\7\1\146\32\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\147\2\7\1\147\4\7\1\150\1\151\14\7"+
    "\1\152\1\153\1\154\25\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\155\11\7\1\156\4\7\1\157"+
    "\32\7\2\0\7\7\5\0\1\51\1\7\1\0\14\7"+
    "\1\160\41\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\161\54\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\53\12\7\1\162\6\7\1\163\32\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\2\7\1\164"+
    "\20\7\1\165\32\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\6\7\1\147\1\7\1\166\1\7\1\167\43\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\170"+
    "\1\7\1\171\5\7\1\172\1\7\1\173\4\7\1\174"+
    "\32\7\2\0\7\7\5\0\1\51\1\7\1\0\14\7"+
    "\1\175\7\7\1\176\31\7\2\0\5\7\1\177\1\7"+
    "\5\0\1\51\1\7\1\0\56\7\1\0\1\55\2\200"+
    "\12\0\1\55\30\0\5\200\25\0\2\201\1\0\1\201"+
    "\1\0\1\201\11\0\2\201\2\0\1\201\6\0\1\201"+
    "\1\0\1\201\7\0\6\201\2\0\1\201\3\0\2\201"+
    "\1\0\1\201\13\0\7\51\5\0\2\51\1\0\56\51"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\15\7\1\202"+
    "\40\7\2\0\7\7\5\0\1\51\1\7\1\0\6\7"+
    "\1\147\47\7\2\0\2\54\3\0\1\47\15\0\1\47"+
    "\21\0\5\54\25\0\2\200\43\0\5\200\25\0\2\56"+
    "\5\7\5\0\1\51\1\7\1\0\26\7\5\56\23\7"+
    "\2\0\2\203\5\51\5\0\2\51\1\0\26\51\5\203"+
    "\23\51\2\0\7\7\5\0\1\51\1\7\1\0\41\7"+
    "\1\147\14\7\2\0\7\61\6\0\1\61\1\0\56\61"+
    "\2\0\3\61\1\204\3\61\6\0\1\61\1\0\40\61"+
    "\1\205\1\206\1\207\1\210\6\61\1\211\3\61\13\212"+
    "\1\213\63\212\2\0\2\214\5\51\5\0\2\51\1\0"+
    "\26\51\5\214\23\51\1\0\1\55\2\203\5\51\5\0"+
    "\1\57\1\51\1\0\26\51\5\203\23\51\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\2\7\1\215\53\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\23\7\1\216\32\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\10\7\1\217"+
    "\45\7\2\0\7\7\5\0\1\51\1\7\1\0\10\7"+
    "\1\220\45\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\6\7\1\221\47\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\14\7\1\222\41\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\3\7\1\223\12\7\1\224\37\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\22\7\1\225\33\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\15\7\1\147"+
    "\40\7\2\0\7\7\5\0\1\51\1\7\1\0\3\7"+
    "\1\226\52\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\11\7\1\227\44\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\3\7\1\230\52\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\14\7\1\231\41\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\2\7\1\232\2\7\1\233\1\234"+
    "\1\7\1\235\45\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\236\4\7\1\237\47\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\12\7\1\240\43\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\7\1\241\54\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\55\7\1\242"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\10\7\1\243"+
    "\45\7\2\0\7\7\5\0\1\51\1\7\1\0\14\7"+
    "\1\244\41\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\4\7\1\245\1\246\5\7\1\247\42\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\3\7\1\250\10\7\1\232"+
    "\41\7\2\0\7\7\5\0\1\51\1\7\1\0\3\7"+
    "\1\251\3\7\1\252\5\7\1\253\40\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\1\7\1\254\5\7\1\255"+
    "\6\7\1\147\37\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\12\7\1\256\43\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\257\1\7\1\260\5\7\1\225"+
    "\41\7\2\0\7\7\5\0\1\51\1\7\1\0\14\7"+
    "\1\261\41\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\3\7\1\262\1\7\1\263\7\7\1\264\4\7\1\265"+
    "\11\7\1\266\21\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\25\7\1\267\30\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\147\51\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\2\7\1\270\1\271\1\7\1\272"+
    "\6\7\1\273\1\274\40\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\5\7\1\275\3\7\1\276\44\7\2\0"+
    "\2\7\1\131\4\7\5\0\1\51\1\7\1\0\33\7"+
    "\1\147\22\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\2\7\1\147\53\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\5\7\1\147\50\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\12\7\1\277\43\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\15\7\1\300\40\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\3\7\1\225\52\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\6\7\1\301\47\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\14\7\1\302"+
    "\6\7\1\303\32\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\25\7\1\304\30\7\2\0\6\7\1\305\5\0"+
    "\1\51\1\7\1\0\56\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\12\7\1\306\43\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\3\7\1\124\1\7\1\307\50\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\1\7\1\134"+
    "\21\7\1\310\32\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\24\7\1\311\31\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\12\7\1\312\43\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\10\7\1\313\2\7\1\314\42\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\2\7\1\315"+
    "\1\316\1\7\1\317\5\7\1\320\42\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\12\7\1\321\43\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\27\7\1\322\26\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\32\7\1\323"+
    "\23\7\2\0\7\7\5\0\1\51\1\7\1\0\31\7"+
    "\1\324\24\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\325\1\7\1\326\10\7\1\327\42\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\10\7\1\330\45\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\7\7\1\331\46\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\332"+
    "\51\7\2\0\7\7\5\0\1\51\1\7\1\0\20\7"+
    "\1\333\35\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\6\7\1\334\47\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\2\7\1\335\11\7\1\336\41\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\23\7\1\337\32\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\5\7\1\264\50\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\340"+
    "\51\7\2\0\7\7\5\0\1\51\1\7\1\0\5\7"+
    "\1\341\50\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\22\7\1\342\33\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\343\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\10\7\1\344\45\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\5\7\1\345\50\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\23\7\1\346\32\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\5\7\1\347\50\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\257"+
    "\7\7\1\350\41\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\36\7\1\351\17\7\2\0\6\7\1\352\5\0"+
    "\1\51\1\7\1\0\56\7\2\0\7\61\6\0\1\61"+
    "\1\0\37\61\1\353\7\61\1\354\6\61\2\0\7\61"+
    "\6\0\1\61\1\0\44\61\1\355\11\61\2\0\7\61"+
    "\6\0\1\61\1\0\37\61\1\356\16\61\2\0\7\61"+
    "\6\0\1\61\1\0\43\61\1\357\12\61\2\0\7\61"+
    "\6\0\1\61\1\0\37\61\1\360\16\61\2\0\5\61"+
    "\1\361\1\61\6\0\1\61\1\0\56\61\13\212\1\362"+
    "\63\212\12\363\1\364\1\365\63\363\2\0\2\214\3\51"+
    "\1\66\1\51\5\0\2\51\1\0\4\51\1\66\21\51"+
    "\5\214\23\51\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\3\7\1\366\52\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\131\54\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\13\7\1\367\42\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\1\7\1\370\54\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\4\7\1\371\51\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\7\1\225\54\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\372"+
    "\51\7\2\0\7\7\5\0\1\51\1\7\1\0\10\7"+
    "\1\373\45\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\3\7\1\147\52\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\5\7\1\374\50\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\25\7\1\375\30\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\5\7\1\376\50\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\3\7\1\377\52\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\147\55\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\20\7\1\u0100\35\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\7\7\1\u0101"+
    "\46\7\2\0\7\7\5\0\1\51\1\7\1\0\5\7"+
    "\1\u0102\50\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\7\7\1\u0103\4\7\1\u0104\41\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\53\51\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\2\7\1\u0105\53\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\4\7\1\u0106\51\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\13\7\1\u0107"+
    "\42\7\2\0\7\7\5\0\1\51\1\7\1\0\5\7"+
    "\1\307\50\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\13\7\1\147\42\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\u0108\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\u0109\51\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\u010a\7\7\1\232\41\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\7\7\1\u010b"+
    "\46\7\2\0\7\7\5\0\1\51\1\7\1\0\11\7"+
    "\1\u010c\44\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\u010d\2\7\1\u010e\10\7\1\232\1\u010f\15\7\1\u0110"+
    "\22\7\2\0\7\7\5\0\1\51\1\7\1\0\10\7"+
    "\1\u0111\45\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\4\7\1\u0112\51\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\u0113\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\10\7\1\147\45\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\23\7\1\u0114\32\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\3\7\1\124\52\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\13\7\1\u0115\42\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\6\7\1\u0116"+
    "\1\u0117\46\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\23\7\1\147\32\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\14\7\1\u0118\41\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\7\7\1\u0119\46\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\16\7\1\u011a\37\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\4\7\1\134\51\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\14\7\1\u011b\41\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\14\7\1\130"+
    "\41\7\2\0\7\7\5\0\1\51\1\7\1\0\23\7"+
    "\1\u011c\32\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\4\7\1\232\51\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\14\7\1\u011d\41\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\u011e\51\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\7\7\1\350\46\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\2\7\1\u011f\53\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\10\7\1\131\7\7"+
    "\1\u0120\35\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\5\7\1\u0121\50\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\2\7\1\u0102\53\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\11\7\1\u0122\44\7\2\0\6\7\1\u0123"+
    "\5\0\1\51\1\7\1\0\56\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\13\7\1\347\42\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\10\7\1\124\45\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\7\1\u0124\54\7"+
    "\2\0\6\7\1\u0125\5\0\1\51\1\7\1\0\56\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\3\7\1\u0126"+
    "\1\7\1\u0127\50\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\23\7\1\u0128\32\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\14\7\1\310\41\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\5\7\1\u0129\50\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\4\7\1\u012a\51\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\2\7\1\u012b\53\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\2\7\1\u012c"+
    "\20\7\1\372\32\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\u012d\54\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\u012e\5\7\1\u012f\43\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\2\7\1\u0130\53\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\1\7\1\u0131"+
    "\54\7\2\0\7\7\5\0\1\51\1\7\1\0\25\7"+
    "\1\u0132\30\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\2\7\1\77\53\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\u0133\54\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\5\7\1\u0134\50\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\1\7\1\u0135\54\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\15\7\1\u0136\40\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\25\7\1\u0137\30\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\33\7\1\u0138"+
    "\22\7\2\0\7\7\5\0\1\51\1\7\1\0\14\7"+
    "\1\u0139\41\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\14\7\1\257\41\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\u013a\54\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\7\1\u013b\54\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\u013c\51\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\2\7\1\u013d\53\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\24\7\1\147\31\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\2\7\1\124"+
    "\53\7\2\0\7\7\5\0\1\51\1\7\1\0\37\7"+
    "\1\u013e\16\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\u013f\6\7\1\u0140\12\7\1\u0141\32\7\2\0"+
    "\7\61\6\0\1\61\1\0\43\61\1\u0142\12\61\2\0"+
    "\7\61\6\0\1\61\1\0\40\61\1\u0143\15\61\2\0"+
    "\7\61\6\0\1\61\1\0\52\61\1\u0144\3\61\2\0"+
    "\7\61\6\0\1\61\1\0\46\61\1\u0145\7\61\2\0"+
    "\7\61\6\0\1\61\1\0\44\61\1\u0146\11\61\2\0"+
    "\7\61\6\0\1\61\1\0\40\61\1\u0142\15\61\2\0"+
    "\7\61\6\0\1\61\1\0\50\61\1\u0147\5\61\12\u0148"+
    "\1\u0149\1\u014a\63\u0148\13\363\1\u014b\63\363\12\0\1\u014c"+
    "\64\0\12\u014c\1\u0149\1\213\63\u014c\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\u014d\51\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\5\7\1\u014e\50\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\2\7\1\u014f\53\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\1\7\1\307"+
    "\54\7\2\0\7\7\5\0\1\51\1\7\1\0\6\7"+
    "\1\131\47\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\13\7\1\u0150\42\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\6\7\1\u0151\47\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\15\7\1\u0152\40\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\5\7\1\u0153\50\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\14\7\1\u0154\41\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\11\7\1\u0155\44\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\14\7\1\245"+
    "\41\7\2\0\7\7\5\0\1\51\1\7\1\0\13\7"+
    "\1\u0156\42\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\10\7\1\u0157\45\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\2\7\1\u0158\53\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\23\7\1\232\32\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\24\7\1\u0159\31\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\10\7\1\u015a\45\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\12\7\1\u015b\43\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\14\7\1\232"+
    "\41\7\2\0\7\7\5\0\1\51\1\7\1\0\6\7"+
    "\1\124\47\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\23\7\1\73\32\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\33\7\1\112\22\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\u015c\51\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\24\7\1\u015d\31\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\3\7\1\u015e\52\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\15\7\1\u015f\40\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\33\7\1\u0160"+
    "\22\7\2\0\7\7\5\0\1\51\1\7\1\0\7\7"+
    "\1\124\46\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\16\7\1\147\37\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\6\7\1\257\47\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\3\7\1\u0161\52\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\14\7\1\u0162\41\7\2\0\6\7"+
    "\1\u0163\5\0\1\51\1\7\1\0\56\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\22\7\1\u0164\33\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\10\7\1\u0165\45\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\20\7\1\124"+
    "\35\7\2\0\7\7\5\0\1\51\1\7\1\0\3\7"+
    "\1\u0166\52\7\2\0\6\7\1\u0167\5\0\1\51\1\7"+
    "\1\0\56\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\u012e\54\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\u0168\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\23\7\1\u0169\32\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\10\7\1\u016a\45\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\6\7\1\u016b\47\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\5\7\1\u016c\2\7"+
    "\1\u016d\3\7\1\u016e\41\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\5\7\1\u016f\50\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\14\7\1\u0170\41\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\1\7\1\u0171\54\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\7\1\u0172\54\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\6\7\1\u0173"+
    "\47\7\2\0\7\7\5\0\1\51\1\7\1\0\7\7"+
    "\1\u0174\46\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\4\7\1\u0175\51\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\7\7\1\u0176\46\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\5\7\1\124\50\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\24\7\1\u0177\31\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\1\7\1\u010b\54\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\11\7\1\u0102\44\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\2\7\1\u0178"+
    "\53\7\2\0\6\7\1\u0179\5\0\1\51\1\7\1\0"+
    "\56\7\2\0\7\7\5\0\1\51\1\7\1\0\7\7"+
    "\1\u0137\46\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\5\7\1\u015d\50\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\130\54\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\7\1\u017a\54\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\23\7\1\u017b\32\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\21\7\1\147\34\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\6\7\1\u017c\47\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\40\7\1\147"+
    "\15\7\2\0\7\7\5\0\1\51\1\7\1\0\2\7"+
    "\1\u017d\2\7\1\u017e\50\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\7\1\u017f\12\7\1\u0180\41\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\12\7\1\u0181\43\7"+
    "\2\0\5\61\1\u0145\1\61\6\0\1\61\1\0\56\61"+
    "\2\0\7\61\6\0\1\61\1\0\42\61\1\u0182\13\61"+
    "\2\0\5\61\1\u0183\1\61\6\0\1\61\1\0\56\61"+
    "\2\0\6\61\1\u0184\6\0\1\61\1\0\56\61\2\0"+
    "\7\61\6\0\1\61\1\0\45\61\1\u0185\10\61\2\0"+
    "\7\61\6\0\1\61\1\0\53\61\1\u0186\2\61\12\212"+
    "\1\u0187\1\362\75\212\1\u0188\1\362\63\212\12\u014c\1\u0189"+
    "\1\u018a\63\u014c\12\363\1\u018b\1\u014b\63\363\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\14\7\1\u018c\41\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\2\7\1\u0116\53\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\1\7\1\u018d"+
    "\54\7\2\0\7\7\5\0\1\51\1\7\1\0\1\7"+
    "\1\147\54\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\13\7\1\u018e\42\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\5\7\1\u018f\50\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\22\7\1\u0190\33\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\5\7\1\u0191\50\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\6\7\1\u0192\47\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\15\7\1\u0193\40\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\5\7\1\u0194"+
    "\50\7\2\0\7\7\5\0\1\51\1\7\1\0\13\7"+
    "\1\327\42\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\14\7\1\350\41\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\14\7\1\u0195\41\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\u0196\51\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\3\7\1\u0197\52\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\5\7\1\240\50\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\6\7\1\u0198\47\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\10\7\1\u0199"+
    "\45\7\2\0\7\7\5\0\1\51\1\7\1\0\10\7"+
    "\1\u019a\45\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\12\7\1\u019b\43\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\12\7\1\u019c\43\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\13\7\1\u019d\42\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\15\7\1\u019e\40\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\1\7\1\u019f\54\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\12\7\1\u01a0\43\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\16\7\1\u01a1"+
    "\37\7\2\0\7\7\5\0\1\51\1\7\1\0\1\7"+
    "\1\u01a2\54\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\10\7\1\u01a3\45\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\10\7\1\u0115\45\7\2\0\6\7\1\u01a4\5\0"+
    "\1\51\1\7\1\0\56\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\10\7\1\u01a5\45\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\1\u01a6\55\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\15\7\1\u01a7\40\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\11\7\1\u01a8\44\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\2\7\1\131\53\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\14\7\1\u01a9"+
    "\41\7\2\0\7\7\5\0\1\51\1\7\1\0\4\7"+
    "\1\u01aa\51\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\12\7\1\u01ab\43\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\16\7\1\u01ac\37\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\10\7\1\u01ad\45\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\16\7\1\u01ae\37\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\2\7\1\u01af\53\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\5\7\1\u01b0\50\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\11\7\1\u01b1"+
    "\44\7\2\0\7\7\5\0\1\51\1\7\1\0\2\7"+
    "\1\u01b2\53\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\5\7\1\u01b3\50\7\2\0\7\61\6\0\1\61\1\0"+
    "\50\61\1\u01b4\5\61\2\0\7\61\6\0\1\61\1\0"+
    "\45\61\1\u01b5\10\61\2\0\6\61\1\u01b6\6\0\1\61"+
    "\1\0\56\61\2\0\7\61\6\0\1\61\1\0\45\61"+
    "\1\u0145\10\61\2\0\7\61\6\0\1\61\1\0\51\61"+
    "\1\u01b7\4\61\12\0\1\u0148\64\0\12\363\1\u01b8\1\u014b"+
    "\63\363\2\0\7\7\5\0\1\51\1\7\1\0\23\7"+
    "\1\257\32\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\13\7\1\131\42\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\u01b9\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\7\1\u01ba\54\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\23\7\1\u01bb\32\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\3\7\1\u01bc\52\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\14\7\1\u01bd\41\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\u01be"+
    "\51\7\2\0\7\7\5\0\1\51\1\7\1\0\1\u01bf"+
    "\55\7\2\0\7\7\5\0\1\51\1\7\1\0\4\7"+
    "\1\u01c0\51\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\u01c1\54\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\77\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\7\1\u01c2\54\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\1\7\1\u01c3\54\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\5\7\1\u019a\50\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\7\7\1\u01c4\46\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\11\7\1\u01c5"+
    "\44\7\2\0\6\7\1\u01c6\5\0\1\51\1\7\1\0"+
    "\56\7\2\0\7\7\5\0\1\51\1\7\1\0\12\7"+
    "\1\u01c7\43\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\11\7\1\u01c8\44\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\13\7\1\u01c9\42\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\12\7\1\u01ca\43\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\13\7\1\242\42\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\1\7\1\u01cb\54\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\4\7\1\u01cc\51\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\u01cd"+
    "\51\7\2\0\6\7\1\u01ce\5\0\1\51\1\7\1\0"+
    "\56\7\2\0\7\7\5\0\1\51\1\7\1\0\1\7"+
    "\1\u01cf\54\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\u01d0\54\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\6\7\1\u01d1\47\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\u01d2\51\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\2\7\1\u01d3\53\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\14\7\1\u01d4\41\7\2\0"+
    "\7\61\6\0\1\61\1\0\37\61\1\u01d5\16\61\2\0"+
    "\7\61\6\0\1\61\1\0\54\61\1\u01d6\1\61\2\0"+
    "\7\61\6\0\1\61\1\0\41\61\1\u0145\14\61\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\2\7\1\u01d7\53\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\10\7\1\u01d8"+
    "\45\7\2\0\7\7\5\0\1\51\1\7\1\0\23\7"+
    "\1\u01d9\32\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\10\7\1\131\45\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\15\7\1\u01da\40\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\11\7\1\u01db\44\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\13\7\1\u01dc\42\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\13\7\1\u01dd\42\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\2\7\1\u01de\53\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\u01df"+
    "\51\7\2\0\7\7\5\0\1\51\1\7\1\0\10\7"+
    "\1\u01e0\45\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\4\7\1\u01e1\51\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\u01e2\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\2\7\1\u01e3\53\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\6\7\1\u01e4\47\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\13\7\1\124\42\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\10\7\1\u01e5\45\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\10\7\1\u01e6"+
    "\45\7\2\0\7\7\5\0\1\51\1\7\1\0\13\7"+
    "\1\u01e7\42\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\2\7\1\u01e8\53\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\3\7\1\u01e9\52\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\3\7\1\u01ea\52\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\1\7\1\u01eb\54\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\23\7\1\u01ec\32\7\2\0"+
    "\7\61\6\0\1\61\1\0\51\61\1\u01ed\4\61\2\0"+
    "\7\61\6\0\1\61\1\0\44\61\1\u01ee\11\61\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\21\7\1\u01ef\34\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\14\7\1\u01f0"+
    "\41\7\2\0\7\7\5\0\1\51\1\7\1\0\10\7"+
    "\1\u01f1\45\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\4\7\1\u01f2\51\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\u01f3\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\21\7\1\u01f4\34\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\u01f5\51\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\3\7\1\u01f6\52\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\7\1\u01f7\54\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\3\7\1\u01f8"+
    "\52\7\2\0\7\7\5\0\1\51\1\7\1\0\7\7"+
    "\1\u01f9\46\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\4\7\1\u01fa\51\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\5\7\1\225\50\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\7\1\u01fb\54\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\21\7\1\u01fc\34\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\12\7\1\u01fd\43\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\25\7\1\u01fe\30\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\10\7\1\u01ff"+
    "\45\7\2\0\7\61\6\0\1\61\1\0\40\61\1\u0145"+
    "\15\61\2\0\7\61\6\0\1\61\1\0\42\61\1\u0142"+
    "\13\61\2\0\6\7\1\u0200\5\0\1\51\1\7\1\0"+
    "\56\7\2\0\7\7\5\0\1\51\1\7\1\0\55\7"+
    "\1\u019a\2\0\7\7\5\0\1\51\1\7\1\0\3\7"+
    "\1\u0201\52\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\u0202\54\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\12\7\1\u0203\43\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\11\7\1\u0204\44\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\12\7\1\u0205\43\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\15\7\1\u0206\40\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\u0207\55\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\11\7\1\u0208\44\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\1\7\1\u0209"+
    "\54\7\2\0\7\7\5\0\1\51\1\7\1\0\1\7"+
    "\1\u020a\54\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\2\7\1\u020b\53\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\u020c\54\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\12\7\1\u020d\1\u020e\42\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\12\7\1\u020f\43\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\22\7\1\u0210\33\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\1\7\1\u0211"+
    "\54\7\2\0\7\7\5\0\1\51\1\7\1\0\4\7"+
    "\1\u0212\51\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\1\7\1\u0213\54\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\u0214\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\14\7\1\u0215\41\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\u0216\51\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\22\7\1\u0217\33\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\13\7\1\u0218\42\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\u0219"+
    "\51\7\2\0\7\7\5\0\1\51\1\7\1\0\2\7"+
    "\1\u021a\53\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\6\7\1\u021b\47\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\1\7\1\u021c\54\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\7\1\u021d\54\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\u021e\51\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\13\7\1\u021f\42\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\3\7\1\u0220\52\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\13\7\1\u0221"+
    "\42\7\2\0\2\7\1\u0222\4\7\5\0\1\51\1\7"+
    "\1\0\56\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\3\7\1\u0223\52\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\4\7\1\u0224\51\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\u0225\51\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\u0226\51\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\5\7\1\u0227\50\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\13\7\1\u0228\42\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\4\7\1\u0229"+
    "\51\7\2\0\7\7\5\0\1\51\1\7\1\0\12\7"+
    "\1\u022a\43\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\4\7\1\u022b\51\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\12\7\1\u022c\43\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\1\u022d\55\7\2\0\7\7\5\0\1\51"+
    "\1\7\1\0\4\7\1\u022e\51\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\4\7\1\u022f\51\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\1\7\1\u0230\54\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\1\7\1\u0231\54\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\14\7\1\u0232"+
    "\41\7\2\0\7\7\5\0\1\51\1\7\1\0\22\7"+
    "\1\u0233\33\7\2\0\7\7\5\0\1\51\1\7\1\0"+
    "\13\7\1\u0234\42\7\2\0\7\7\5\0\1\51\1\7"+
    "\1\0\13\7\1\u0235\42\7\2\0\2\7\1\u0236\4\7"+
    "\5\0\1\51\1\7\1\0\56\7\2\0\7\7\5\0"+
    "\1\51\1\7\1\0\23\7\1\u0237\32\7\2\0\7\7"+
    "\5\0\1\51\1\7\1\0\4\7\1\u0238\51\7\2\0"+
    "\7\7\5\0\1\51\1\7\1\0\4\7\1\u0239\51\7"+
    "\2\0\7\7\5\0\1\51\1\7\1\0\6\7\1\u023a"+
    "\47\7\2\0\7\7\5\0\1\51\1\7\1\0\16\7"+
    "\1\u023b\37\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[32004];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\14\1\1\11\26\1\3\0\4\1\1\0"+
    "\5\1\1\0\126\1\2\0\146\1\2\0\1\1\1\0"+
    "\122\1\1\0\1\11\3\0\72\1\1\0\1\1\1\11"+
    "\2\0\260\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[571];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YYLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  YYLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* do nothing */
          }
        case 60: break;
        case 43: 
          { return K.s(YYParser.tok_xception);
          }
        case 61: break;
        case 9: 
          { return K.s(YYParser.tok_int_constant,
      new java_cup.runtime.YYLVal(Long.parseLong(yytext().substring(2), 16)));
          }
        case 62: break;
        case 8: 
          { K.c.thriftReservedKeyword(yytext());
          }
        case 63: break;
        case 40: 
          { return K.s(YYParser.tok_cpp_type);
          }
        case 64: break;
        case 36: 
          { return K.s(YYParser.tok_extends);
          }
        case 65: break;
        case 23: 
          { return K.s(YYParser.tok_slist);
          }
        case 66: break;
        case 18: 
          { return K.s(YYParser.tok_void);
          }
        case 67: break;
        case 37: 
          { return K.s(YYParser.tok_typedef);
          }
        case 68: break;
        case 46: 
          { return K.s(YYParser.tok_cpp_include);
          }
        case 69: break;
        case 25: 
          { return K.s(YYParser.tok_union);
          }
        case 70: break;
        case 45: 
          { return K.s(YYParser.tok_py_module);
          }
        case 71: break;
        case 17: 
          { return K.s(YYParser.tok_int_constant, new java_cup.runtime.YYLVal(1));
          }
        case 72: break;
        case 26: 
          { return K.s(YYParser.tok_const);
          }
        case 73: break;
        case 54: 
          { return K.s(YYParser.tok_cpp_namespace);
          }
        case 74: break;
        case 38: 
          { return K.s(YYParser.tok_include);
          }
        case 75: break;
        case 11: 
          { return K.s(YYParser.tok_map);
          }
        case 76: break;
        case 31: 
          { return K.s(YYParser.tok_double);
          }
        case 77: break;
        case 28: 
          { return K.s(YYParser.tok_struct);
          }
        case 78: break;
        case 32: 
          { return K.s(YYParser.tok_oneway);
          }
        case 79: break;
        case 59: 
          { return K.s(YYParser.tok_smalltalk_category);
          }
        case 80: break;
        case 30: 
          { return K.s(YYParser.tok_throws);
          }
        case 81: break;
        case 55: 
          { return K.s(YYParser.tok_ruby_namespace);
          }
        case 82: break;
        case 34: 
          { return K.s(YYParser.tok_xsd_all);
          }
        case 83: break;
        case 49: 
          { return K.s(YYParser.tok_perl_package);
          }
        case 84: break;
        case 53: 
          { return K.s(YYParser.tok_php_namespace);
          }
        case 85: break;
        case 20: 
          { return K.s(YYParser.tok_bool);
          }
        case 86: break;
        case 41: 
          { return K.s(YYParser.tok_optional);
          }
        case 87: break;
        case 12: 
          { return K.s(YYParser.tok_i16);
          }
        case 88: break;
        case 47: 
          { return K.s(YYParser.tok_xsd_nillable);
          }
        case 89: break;
        case 57: 
          { return K.s(YYParser.tok_csharp_namespace);
          }
        case 90: break;
        case 3: 
          { return K.s(YYParser.tok_dub_constant,
      new java_cup.runtime.YYLVal(Double.parseDouble(yytext())));
          }
        case 91: break;
        case 19: 
          { return K.s(YYParser.tok_byte);
          }
        case 92: break;
        case 39: 
          { return K.s(YYParser.tok_required);
          }
        case 93: break;
        case 56: 
          { return K.s(YYParser.tok_smalltalk_prefix);
          }
        case 94: break;
        case 51: 
          { return K.s(YYParser.tok_java_package);
          }
        case 95: break;
        case 16: 
          { return K.s(YYParser.tok_enum);
          }
        case 96: break;
        case 22: 
          { K.c.pwarning(0, "\"async\" is deprecated.  It is called \"oneway\" now.\n");
  return K.s(YYParser.tok_oneway);
          }
        case 97: break;
        case 4: 
          { return K.s(YYParser.tok_int_constant,
      new java_cup.runtime.YYLVal(Long.parseLong(yytext())));
          }
        case 98: break;
        case 29: 
          { return K.s(YYParser.tok_string);
          }
        case 99: break;
        case 7: 
          { return K.s(YYParser.tok_st_identifier,
      new java_cup.runtime.YYLVal(yytext()));
          }
        case 100: break;
        case 5: 
          { return K.s(YYParser.tok_identifier,
      new java_cup.runtime.YYLVal(yytext()));
          }
        case 101: break;
        case 58: 
          { return K.s(YYParser.tok_delphi_namespace);
          }
        case 102: break;
        case 50: 
          { return K.s(YYParser.tok_cocoa_prefix);
          }
        case 103: break;
        case 13: 
          { return K.s(YYParser.tok_i64);
          }
        case 104: break;
        case 14: 
          { return K.s(YYParser.tok_i32);
          }
        case 105: break;
        case 44: 
          { return K.s(YYParser.tok_namespace);
          }
        case 106: break;
        case 24: 
          { return K.s(YYParser.tok_senum);
          }
        case 107: break;
        case 6: 
          { String text = yytext();
  StringBuffer result = new StringBuffer();
  for(int i = 0; i < text.length(); ++i)
  {
    char ch = text.charAt(i);
    switch (ch) {
      case '\n':
        System.err.println("End of line while read string at "+(yyline-1)+"\n");
        System.exit(1);
      case '\\':
        ++i; ch = text.charAt(i);
        switch (ch) {
          case 'r':
            result.append('\r');
            continue;
          case 'n':
            result.append('\n');
            continue;
          case 't':
            result.append('\t');
            continue;
          case '"':
            result.append('"');
            continue;
          case '\'':
            result.append('\'');
            continue;
          case '\\':
            result.append('\\');
            continue;
          default:
	    throw new IllegalArgumentException("Bad escape character: "+ch);
      }
      default:
        result.append(ch);
    }
  }
  return K.s(YYParser.tok_literal,
    new java_cup.runtime.YYLVal(result.toString()));
          }
        case 108: break;
        case 10: 
          { return K.s(YYParser.tok_set);
          }
        case 109: break;
        case 21: 
          { return K.s(YYParser.tok_int_constant, new java_cup.runtime.YYLVal(0));
          }
        case 110: break;
        case 48: 
          { return K.s(YYParser.tok_xsd_optional);
          }
        case 111: break;
        case 52: 
          { return K.s(YYParser.tok_xsd_namespace);
          }
        case 112: break;
        case 42: 
          { return K.s(YYParser.tok_xsd_attrs);
          }
        case 113: break;
        case 15: 
          { return K.s(YYParser.tok_list);
          }
        case 114: break;
        case 2: 
          { K.c.unexpectedToken(yytext());
          }
        case 115: break;
        case 27: 
          { /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (K.c.parseMode == Context.ParseMode.PROGRAM) {
    // TODO - un-hack
    K.c.clear_doctext();
    K.c.doctext = new String(yytext());
    //K.c.doctext = clean_up_doctext(g_doctext);
    K.c.doctextLineno = yyline;
  }
          }
        case 116: break;
        case 35: 
          { return K.s(YYParser.tok_service);
          }
        case 117: break;
        case 33: 
          { return K.s(YYParser.tok_binary);
          }
        case 118: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
