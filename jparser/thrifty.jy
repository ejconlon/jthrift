%code imports {
package jthrift;

import java.util.Map;
import java.util.List;

class C {
      static Context c = Context.getInstance();
}

}

%{
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Thrift parser.
 *
 * This parser is used on a thrift definition file.
 *
 */
%}

/**
 * Strings identifier
 */
%token<Id>     tok_identifier
%token<Id>     tok_literal
%token<DText>      tok_doctext
%token<Id>     tok_st_identifier

/**
 * Constant values
 */
%token<IConst> tok_int_constant
%token<DConst> tok_dub_constant

/**
 * Header keywords
 */
%token tok_include
%token tok_namespace
%token tok_cpp_namespace
%token tok_cpp_include
%token tok_cpp_type
%token tok_php_namespace
%token tok_py_module
%token tok_perl_package
%token tok_java_package
%token tok_xsd_all
%token tok_xsd_optional
%token tok_xsd_nillable
%token tok_xsd_namespace
%token tok_xsd_attrs
%token tok_ruby_namespace
%token tok_smalltalk_category
%token tok_smalltalk_prefix
%token tok_cocoa_prefix
%token tok_csharp_namespace
%token tok_delphi_namespace

/**
 * Base datatype keywords
 */
%token tok_void
%token tok_bool
%token tok_byte
%token tok_string
%token tok_binary
%token tok_slist
%token tok_senum
%token tok_i16
%token tok_i32
%token tok_i64
%token tok_double

/**
 * Complex type keywords
 */
%token tok_map
%token tok_list
%token tok_set

/**
 * Function modifiers
 */
%token tok_oneway

/**
 * Thrift language keywords
 */
%token tok_typedef
%token tok_struct
%token tok_xception
%token tok_throws
%token tok_extends
%token tok_service
%token tok_enum
%token tok_const
%token tok_required
%token tok_optional
%token tok_union

/**
 * Grammar nodes
 */

%type<TType>     BaseType
%type<TType>     SimpleBaseType
%type<TType>     ContainerType
%type<TType>     SimpleContainerType
%type<TType>     MapType
%type<TType>     SetType
%type<TType>     ListType

%type<TDoc>      Definition
%type<TType>     TypeDefinition

%type<TTypedef>  Typedef

%type<TType>     TypeAnnotations
%type<TType>     TypeAnnotationList
%type<TAnnotation> TypeAnnotation

%type<TField>    Field
%type<TFieldId>  FieldIdentifier
%type<TField.Mods> FieldRequiredness
%type<TType>     FieldType
%type<TConstValue>   FieldValue
%type<TStruct>   FieldList

%type<TEnum>     Enum
%type<TEnum>     EnumDefList
%type<TEnumValue> EnumDef

%type<TTypedef>  Senum
%type<TBaseType> SenumDefList
%type<Id>        SenumDef

%type<TConst>    Const
%type<TConstValue>   ConstValue
%type<TConstValue>   ConstList
%type<TConstValue>   ConstListContents
%type<TConstValue>   ConstMap
%type<TConstValue>   ConstMapContents

%type<IConst>    StructHead
%type<TStruct>   Struct
%type<TStruct>   Xception
%type<TService>  Service

%type<TFunction> Function
%type<TType>     FunctionType
%type<TService>  FunctionList

%type<TStruct>   Throws
%type<TService>  Extends
%type<TBool>     Oneway
%type<TBool>     XsdAll
%type<TBool>     XsdOptional
%type<TBool>     XsdNillable
%type<TStruct>   XsdAttributes
%type<Id>        CppType

%type<DText>     CaptureDocText

%%

/**
 * Thrift Grammar Implementation.
 *
 * For the most part this source file works its way top down from what you
 * might expect to find in a typical .thrift file, i.e. type definitions and
 * namespaces up top followed by service definitions using those types.
 */

Program:
  HeaderList DefinitionList
    {
      C.c.pdebug("Program . Headers DefinitionList");
      /*
      TODO(dreiss): Decide whether full-program doctext is worth the trouble.
      if ($1 != null) {
        C.c.program.setDoc($1);
      }
      */
      C.c.clear_doctext();
    }

CaptureDocText:
    {
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        $$ = C.c.doctext;
        C.c.doctext = null;
      } else {
        $$ = null;
      }
    }

/* TODO(dreiss): Try to DestroyDocText in all sorts or random places. */
DestroyDocText:
    {
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.clear_doctext();
      }
    }

/* We have to DestroyDocText here, otherwise it catches the doctext
   on the first real element. */
HeaderList:
  HeaderList DestroyDocText Header
    {
      C.c.pdebug("HeaderList . HeaderList Header");
    }
|
    {
      C.c.pdebug("HeaderList . ");
    }

Header:
  Include
    {
      C.c.pdebug("Header . Include");
    }
| tok_namespace tok_identifier tok_identifier
    {
      C.c.pdebug("Header . tok_namespace tok_identifier tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace($2, $3);
      }
    }
| tok_namespace '*' tok_identifier
    {
      C.c.pdebug("Header . tok_namespace * tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("*"), $3);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_cpp_namespace tok_identifier
    {
      C.c.pwarning(1, "'cpp_namespace' is deprecated. Use 'namespace cpp' instead");
      C.c.pdebug("Header . tok_cpp_namespace tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("cpp"), $2);
      }
    }
| tok_cpp_include tok_literal
    {
      C.c.pdebug("Header . tok_cpp_include tok_literal");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.addCppInclude($2);
      }
    }
| tok_php_namespace tok_identifier
    {
      C.c.pwarning(1, "'php_namespace' is deprecated. Use 'namespace php' instead");
      C.c.pdebug("Header . tok_php_namespace tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("php"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_py_module tok_identifier
    {
      C.c.pwarning(1, "'py_module' is deprecated. Use 'namespace py' instead");
      C.c.pdebug("Header . tok_py_module tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("py"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_perl_package tok_identifier
    {
      C.c.pwarning(1, "'perl_package' is deprecated. Use 'namespace perl' instead");
      C.c.pdebug("Header . tok_perl_namespace tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("perl"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_ruby_namespace tok_identifier
    {
      C.c.pwarning(1, "'ruby_namespace' is deprecated. Use 'namespace rb' instead");
      C.c.pdebug("Header . tok_ruby_namespace tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("rb"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_smalltalk_category tok_st_identifier
    {
      C.c.pwarning(1, "'smalltalk_category' is deprecated. Use 'namespace smalltalk.category' instead");
      C.c.pdebug("Header . tok_smalltalk_category tok_st_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("smalltalk.category"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_smalltalk_prefix tok_identifier
    {
      C.c.pwarning(1, "'smalltalk_prefix' is deprecated. Use 'namespace smalltalk.prefix' instead");
      C.c.pdebug("Header . tok_smalltalk_prefix tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("smalltalk.prefix"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_java_package tok_identifier
    {
      C.c.pwarning(1, "'java_package' is deprecated. Use 'namespace java' instead");
      C.c.pdebug("Header . tok_java_package tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("java"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_cocoa_prefix tok_identifier
    {
      C.c.pwarning(1, "'cocoa_prefix' is deprecated. Use 'namespace cocoa' instead");
      C.c.pdebug("Header . tok_cocoa_prefix tok_identifier");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("cocoa"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_xsd_namespace tok_literal
    {
      C.c.pwarning(1, "'xsd_namespace' is deprecated. Use 'namespace xsd' instead");
      C.c.pdebug("Header . tok_xsd_namespace tok_literal");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.setNamespace(new Id("cocoa"), $2);
      }
    }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_csharp_namespace tok_identifier
   {
     C.c.pwarning(1, "'csharp_namespace' is deprecated. Use 'namespace csharp' instead");
     C.c.pdebug("Header . tok_csharp_namespace tok_identifier");
     if (C.c.parseMode == Context.ParseMode.PROGRAM) {
       C.c.program.setNamespace(new Id("csharp"), $2);
     }
   }
/* TODO(dreiss): Get rid of this once everyone is using the new hotness. */
| tok_delphi_namespace tok_identifier
   {
     C.c.pwarning(1, "'delphi_namespace' is deprecated. Use 'namespace delphi' instead");
     C.c.pdebug("Header . tok_delphi_namespace tok_identifier");
     if (C.c.parseMode == Context.ParseMode.PROGRAM) {
       C.c.program.setNamespace(new Id("delphi"), $2);
     }
   }

Include:
  tok_include tok_literal
    {
      C.c.pdebug("Include . tok_include tok_literal");
      if (C.c.parseMode == Context.ParseMode.INCLUDES) {
        Id path = C.c.includeFile($2);
        if (path.toString().length() > 0) {
          C.c.program.addInclude(path, $2);
        }
      }
    }

DefinitionList:
  DefinitionList CaptureDocText Definition
    {
      C.c.pdebug("DefinitionList . DefinitionList Definition");
      if ($2 != null && $3 != null) {
        $3.setDoc($2);
      }
    }
|
    {
      C.c.pdebug("DefinitionList . ");
    }

Definition:
  Const
    {
      C.c.pdebug("Definition . Const");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.addConst($1);
      }
      $$ = $1;
    }
| TypeDefinition
    {
      C.c.pdebug("Definition . TypeDefinition");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.scope.addType($1.getName(), $1);
        if (C.c.parentScope != null) {
          C.c.parentScope.addType(Id.fromString(C.c.parentPrefix + $1.getName()), $1);
        }
      }
      $$ = $1;
    }
| Service
    {
      C.c.pdebug("Definition . Service");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.scope.addService($1.getName(), $1);
        if (C.c.parentScope != null) {
          C.c.parentScope.addService(Id.fromString(C.c.parentPrefix + $1.getName()), $1);
        }
        C.c.program.addService($1);
      }
      $$ = $1;
    }

TypeDefinition:
  Typedef
    {
      C.c.pdebug("TypeDefinition . Typedef");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.addTypedef($1);
      }
    }
| Enum
    {
      C.c.pdebug("TypeDefinition . Enum");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.addEnum($1);
      }
    }
| Senum
    {
      C.c.pdebug("TypeDefinition . Senum");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.addTypedef($1);
      }
    }
| Struct
    {
      C.c.pdebug("TypeDefinition . Struct");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.addStruct($1);
      }
    }
| Xception
    {
      C.c.pdebug("TypeDefinition . Xception");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.program.addXception($1);
      }
    }

Typedef:
  tok_typedef FieldType tok_identifier
    {
      C.c.pdebug("TypeDef . tok_typedef FieldType tok_identifier");
      TTypedef td = new TTypedef(C.c.program, $2, $3);
      $$ = td;
    }

CommaOrSemicolonOptional:
  ','
    {}
| ';'
    {}
|
    {}

Enum:
  tok_enum tok_identifier '{' EnumDefList '}'
    {
      C.c.pdebug("Enum . tok_enum tok_identifier { EnumDefList }");
      $$ = $4;
      TEnum tenum = (TEnum)$$;
      tenum.setName($2);
      tenum.resolveValues();
      // make constants for all the enum values
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        List<TEnumValue> enum_values = tenum.getConstants();
        for (TEnumValue value : enum_values) {
          Id const_name = Id.fromString(tenum.getName() + "." + value.getName());
          TConstValue const_val = new TConstValue(value.getValue());
          const_val.setEnum(tenum);
          C.c.scope.addConstant(const_name, new TConst(C.c.typeI32, value.getName(), const_val));
          if (C.c.parentScope != null) {
            C.c.parentScope.addConstant(Id.fromString(C.c.parentPrefix + const_name),
	        new TConst(C.c.typeI32, value.getName(), const_val));
          }
        }
      }
    }

EnumDefList:
  EnumDefList EnumDef
    {
      C.c.pdebug("EnumDefList . EnumDefList EnumDef");
      $$ = $1;
      ((TEnum)$$).append($2);
    }
|
    {
      C.c.pdebug("EnumDefList . ");
      $$ = new TEnum(C.c.program);
    }

EnumDef:
  CaptureDocText tok_identifier '=' tok_int_constant CommaOrSemicolonOptional
    {
      C.c.pdebug("EnumDef . tok_identifier = tok_int_constant");
      if ($4.getLong() < 0) {
        C.c.pwarning(1, "Negative value supplied for enum "+$2+".\n");
      }
      if ($4.getLong() > Integer.MAX_VALUE) {
        C.c.pwarning(1, "64-bit value supplied for enum "+$2+".\n");
      }
      $$ = new TEnumValue($2, $4);
      if ($1 != null) {
        ((TEnumValue)$$).setDoc($1);
      }
    }
|
  CaptureDocText tok_identifier CommaOrSemicolonOptional
    {
      C.c.pdebug("EnumDef . tok_identifier");
      $$ = new TEnumValue($2);
      if ($1 != null) {
        ((TEnumValue)$$).setDoc($1);
      }
    }

Senum:
  tok_senum tok_identifier '{' SenumDefList '}'
    {
      C.c.pdebug("Senum . tok_senum tok_identifier { SenumDefList }");
      $$ = new TTypedef(C.c.program, $4, $2);
    }

SenumDefList:
  SenumDefList SenumDef
    {
      C.c.pdebug("SenumDefList . SenumDefList SenumDef");
      $$ = $1;
      ((TBaseType)$$).addStringEnumVal($2);
    }
|
    {
      C.c.pdebug("SenumDefList . ");
      $$ = new TBaseType(Id.fromString("string"), TType.ConcreteType.STRING);
      ((TBaseType)$$).setStringEnum(true);
    }

SenumDef:
  tok_literal CommaOrSemicolonOptional
    {
      C.c.pdebug("SenumDef . tok_literal");
      $$ = $1;
    }

Const:
  tok_const FieldType tok_identifier '=' ConstValue CommaOrSemicolonOptional
    {
      C.c.pdebug("Const . tok_const FieldType tok_identifier = ConstValue");
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        C.c.scope.resolveConstValue($5, $2);
        $$ = new TConst($2, $3, $5);
        C.c.validateConstType(((TConst)$$));

        C.c.scope.addConstant($3, ((TConst)$$));
        if (C.c.parentScope != null) {
          C.c.parentScope.addConstant(Id.fromString(C.c.parentPrefix + $3), ((TConst)$$));
        }
      } else {
        $$ = null;
      }
    }

ConstValue:
  tok_int_constant
    {
      C.c.pdebug("ConstValue => tok_int_constant");
      $$ = new TConstValue();
      ((TConstValue)$$).setInteger($1);
      if (!C.c.allow64bitConsts && ($1.getLong() < Integer.MIN_VALUE || $1.getLong() > Integer.MAX_VALUE)) {
        C.c.pwarning(1, "64-bit constant may not work in all languages.\n"+$1);
      }
    }
| tok_dub_constant
    {
      C.c.pdebug("ConstValue => tok_dub_constant");
      $$ = new TConstValue();
      ((TConstValue)$$).setDouble($1);
    }
| tok_literal
    {
      C.c.pdebug("ConstValue => tok_literal");
      $$ = new TConstValue($1.toString());
    }
| tok_identifier
    {
      C.c.pdebug("ConstValue => tok_identifier");
      $$ = new TConstValue();
      ((TConstValue)$$).setIdentifier($1);
    }
| ConstList
    {
      C.c.pdebug("ConstValue => ConstList");
      $$ = $1;
    }
| ConstMap
    {
      C.c.pdebug("ConstValue => ConstMap");
      $$ = $1;
    }

ConstList:
  '[' ConstListContents ']'
    {
      C.c.pdebug("ConstList => [ ConstListContents ]");
      $$ = $2;
    }

ConstListContents:
  ConstListContents ConstValue CommaOrSemicolonOptional
    {
      C.c.pdebug("ConstListContents => ConstListContents ConstValue CommaOrSemicolonOptional");
      $$ = $1;
      ((TConstValue)$$).addList($2);
    }
|
    {
      C.c.pdebug("ConstListContents =>");
      $$ = new TConstValue();
      ((TConstValue)$$).setList();
    }

ConstMap:
  '{' ConstMapContents '}'
    {
      C.c.pdebug("ConstMap => { ConstMapContents }");
      $$ = $2;
    }

ConstMapContents:
  ConstMapContents ConstValue ':' ConstValue CommaOrSemicolonOptional
    {
      C.c.pdebug("ConstMapContents => ConstMapContents ConstValue CommaOrSemicolonOptional");
      $$ = $1;
      ((TConstValue)$$).addMap($2, $4);
    }
|
    {
      C.c.pdebug("ConstMapContents =>");
      $$ = new TConstValue();
      ((TConstValue)$$).setMap();
    }

StructHead:
  tok_struct
    {
      $$ = C.c.structIsStruct;
    }
| tok_union
    {
      $$ = C.c.structIsUnion;
    }

Struct:
  StructHead tok_identifier XsdAll '{' FieldList '}' TypeAnnotations
    {
      C.c.pdebug("Struct . tok_struct tok_identifier { FieldList }");
      $5.setXsdAll($3);
      $5.setUnion(TBool.fromBoolean($1.getLong() == C.c.structIsUnion));
      $$ = $5;
      ((TStruct)$$).setName($2);
      if ($7 != null) {
        ((TStruct)$$).getAnnotations().putAll($7.getAnnotations());
      }
    }
    
XsdAll:
  tok_xsd_all
    {
      $$ = true;
    }
|
    {
      $$ = false;
    }

XsdOptional:
  tok_xsd_optional
    {
      $$ = true;
    }
|
    {
      $$ = false;
    }

XsdNillable:
  tok_xsd_nillable
    {
      $$ = true;
    }
|
    {
      $$ = false;
    }

XsdAttributes:
  tok_xsd_attrs '{' FieldList '}'
    {
      $$ = $3;
    }
|
    {
      $$ = null;
    }

Xception:
  tok_xception tok_identifier '{' FieldList '}'
    {
      C.c.pdebug("Xception . tok_xception tok_identifier { FieldList }");
      $4.setName($2);
      $4.setXception(TBool.fromBoolean(true));
      $$ = $4;
    }

Service:
  tok_service tok_identifier Extends '{' FlagArgs FunctionList UnflagArgs '}'
    {
      C.c.pdebug("Service . tok_service tok_identifier { FunctionList }");
      $$ = $6;
      ((TService)$$).setName($2);
      ((TService)$$).setExtends($3);
    }

FlagArgs:
    {
       C.c.arglist = 1;
    }

UnflagArgs:
    {
       C.c.arglist = 0;
    }

Extends:
  tok_extends tok_identifier
    {
      C.c.pdebug("Extends . tok_extends tok_identifier");
      $$ = null;
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        $$ = C.c.scope.getService($2);
        if ($$ == null) {
          yyerror("Service "+$2+" has not been defined.");
          System.exit(1);
        }
      }
    }
|
    {
      $$ = null;
    }

FunctionList:
  FunctionList Function
    {
      C.c.pdebug("FunctionList . FunctionList Function");
      $$ = $1;
      $1.addFunction($2);
    }
|
    {
      C.c.pdebug("FunctionList . ");
      $$ = new TService(C.c.program);
    }

Function:
  CaptureDocText Oneway FunctionType tok_identifier '(' FieldList ')' Throws CommaOrSemicolonOptional
    {
      $6.setName(Id.fromString($4 + "_args"));
      $$ = new TFunction($3, $4, $6, $8, $2);
      if ($1 != null) {
        ((TFunction)$$).setDoc($1);
      }
    }

Oneway:
  tok_oneway
    {
      $$ = true;
    }
|
    {
      $$ = false;
    }

Throws:
  tok_throws '(' FieldList ')'
    {
      C.c.pdebug("Throws . tok_throws ( FieldList )");
      $$ = $3;
      if (C.c.parseMode == Context.ParseMode.PROGRAM && !C.c.validateThrows(((TStruct)$$))) {
        yyerror("Throws clause may not contain non-exception types");
        System.exit(1);
      }
    }
|
    {
      $$ = new TStruct(C.c.program);
    }

FieldList:
  FieldList Field
    {
      C.c.pdebug("FieldList . FieldList , Field");
      $$ = $1;
      if (!(((TStruct)$$).append($2))) {
      	Long key = $2.getKey().getLong();
	String name = $2.getName().toString();
        yyerror("Field identifier "+key+" for \""+name+"\" has already been used");
        System.exit(1);
      }
    }
|
    {
      C.c.pdebug("FieldList . ");
      C.c.fieldVal = -1;
      $$ = new TStruct(C.c.program);
    }

Field:
  CaptureDocText FieldIdentifier FieldRequiredness FieldType tok_identifier FieldValue XsdOptional XsdNillable XsdAttributes TypeAnnotations CommaOrSemicolonOptional
    {
      C.c.pdebug("tok_int_constant : Field . FieldType tok_identifier");
      if ($2.isAutoAssigned()) {
        C.c.pwarning(1, "No field key specified for "+$5+", resulting protocol may have conflicts or not be backwards compatible!\n");
        if (C.c.strict >= 192) {
          yyerror("Implicit field keys are deprecated and not allowed with -strict");
          System.exit(1);
        }
      }
      $$ = new TField($4, $5, $2.getValue());
      ((TField)$$).setMod($3);
      if ($6 != null) {
        C.c.scope.resolveConstValue($6, $4);
        C.c.validateFieldValue(((TField)$$), $6);
        ((TField)$$).setValue($6);
      }
      ((TField)$$).setXsdOptional($7);
      ((TField)$$).setXsdNillable($8);
      if ($1 != null) {
        ((TField)$$).setDoc($1);
      }
      if ($9 != null) {
        ((TField)$$).setXsdAttrs($9);
      }
      if ($10 != null) {
        ((TField)$$).getAnnotations().putAll($10.getAnnotations());
      }
    }

FieldIdentifier:
  tok_int_constant ':'
    {
      if ($1.getLong() <= 0) {
        if (C.c.allowNegFieldKeys) {
          /*
           * allowNegFieldKeys exists to allow users to add explicitly
           * specified key values to old .thrift files without breaking
           * protocol compatibility.
           */
          if ($1.getLong() != C.c.fieldVal) {
            /*
             * warn if the user-specified negative value isn't what
             * thrift would have auto-assigned.
             */
            C.c.pwarning(1, "Negative field key ("+$1+") differs from what would be "+
                     "auto-assigned by thrift ("+C.c.fieldVal+").\n");
          }
          /*
           * Leave $1 as-is, and update fieldVal to be one less than $1.
           * The FieldList parsing will catch any duplicate key values.
           */
          C.c.fieldVal = $1.getLong() - 1;
          ((IConst)$$).setLong($1.getLong());
          ((IConst)$$).setIsAutoAssigned(false);
        } else {
          C.c.pwarning(1, "Nonpositive value ("+$1+") not allowed as a field key.\n");
          ((IConst)$$).setLong(C.c.fieldVal--);
          ((IConst)$$).setIsAutoAssigned(true);
        }
      } else {
        ((IConst)$$).setLong($1.getLong());
        ((IConst)$$).setIsAutoAssigned(false);
      }
    }
|
    {
      ((IConst)$$).setLong(C.c.fieldVal--);
      ((IConst)$$).setIsAutoAssigned(true);
    }

FieldRequiredness:
  tok_required
    {
      $$ = TField.Mods.REQUIRED;
    }
| tok_optional
    {
      if (C.c.arglist != 0) {
        if (C.c.parseMode == Context.ParseMode.PROGRAM) {
          C.c.pwarning(1, "optional keyword is ignored in argument lists.\n");
        }
        $$ = TField.Mods.OPT_IN_REQ_OUT;
      } else {
        $$ = TField.Mods.OPTIONAL;
      }
    }
|
    {
      $$ = TField.Mods.OPT_IN_REQ_OUT;
    }

FieldValue:
  '=' ConstValue
    {
      if (C.c.parseMode == Context.ParseMode.PROGRAM) {
        $$ = $2;
      } else {
        $$ = null;
      }
    }
|
    {
      $$ = null;
    }

FunctionType:
  FieldType
    {
      C.c.pdebug("FunctionType . FieldType");
      $$ = $1;
    }
| tok_void
    {
      C.c.pdebug("FunctionType . tok_void");
      $$ = C.c.typeVoid;
    }

FieldType:
  tok_identifier
    {
      C.c.pdebug("FieldType . tok_identifier");
      if (C.c.parseMode == Context.ParseMode.INCLUDES) {
        // Ignore identifiers in include mode
        $$ = null;
      } else {
        // Lookup the identifier in the current scope
        $$ = C.c.scope.getType($1);
        if ($$ == null) {
          yyerror("Type "+$1+" has not been defined.");
          System.exit(1);
        }
      }
    }
| BaseType
    {
      C.c.pdebug("FieldType . BaseType");
      $$ = $1;
    }
| ContainerType
    {
      C.c.pdebug("FieldType . ContainerType");
      $$ = $1;
    }

BaseType: SimpleBaseType TypeAnnotations
    {
      C.c.pdebug("BaseType . SimpleBaseType TypeAnnotations");
      if ($2 != null) {
        $$ = new TBaseType((TBaseType)($1));
        ((TBaseType)$$).getAnnotations().putAll($2.getAnnotations());
      } else {
        $$ = $1;
      }
    }

SimpleBaseType:
  tok_string
    {
      C.c.pdebug("BaseType . tok_string");
      $$ = C.c.typeString;
    }
| tok_binary
    {
      C.c.pdebug("BaseType . tok_binary");
      $$ = C.c.typeBinary;
    }
| tok_slist
    {
      C.c.pdebug("BaseType . tok_slist");
      $$ = C.c.typeSlist;
    }
| tok_bool
    {
      C.c.pdebug("BaseType . tok_bool");
      $$ = C.c.typeBool;
    }
| tok_byte
    {
      C.c.pdebug("BaseType . tok_byte");
      $$ = C.c.typeByte;
    }
| tok_i16
    {
      C.c.pdebug("BaseType . tok_i16");
      $$ = C.c.typeI16;
    }
| tok_i32
    {
      C.c.pdebug("BaseType . tok_i32");
      $$ = C.c.typeI32;
    }
| tok_i64
    {
      C.c.pdebug("BaseType . tok_i64");
      $$ = C.c.typeI64;
    }
| tok_double
    {
      C.c.pdebug("BaseType . tok_double");
      $$ = C.c.typeDouble;
    }

ContainerType: SimpleContainerType TypeAnnotations
    {
      C.c.pdebug("ContainerType . SimpleContainerType TypeAnnotations");
      $$ = $1;
      if ($2 != null) {
        ((TContainer)$$).getAnnotations().putAll($2.getAnnotations());
      }
    }

SimpleContainerType:
  MapType
    {
      C.c.pdebug("SimpleContainerType . MapType");
      $$ = $1;
    }
| SetType
    {
      C.c.pdebug("SimpleContainerType . SetType");
      $$ = $1;
    }
| ListType
    {
      C.c.pdebug("SimpleContainerType . ListType");
      $$ = $1;
    }

MapType:
  tok_map CppType '<' FieldType ',' FieldType '>'
    {
      C.c.pdebug("MapType . tok_map <FieldType, FieldType>");
      $$ = new TMap($4, $6);
      if ($2 != null) {
        ((TContainer)$$).setCppName($2);
      }
    }

SetType:
  tok_set CppType '<' FieldType '>'
    {
      C.c.pdebug("SetType . tok_set<FieldType>");
      $$ = new TSet($4);
      if ($2 != null) {
        ((TContainer)$$).setCppName($2);
      }
    }

ListType:
  tok_list '<' FieldType '>' CppType
    {
      C.c.pdebug("ListType . tok_list<FieldType>");
      $$ = new TList($3);
      if ($5 != null) {
        ((TContainer)$$).setCppName($5);
      }
    }

CppType:
  tok_cpp_type tok_literal
    {
      $$ = $2;
    }
|
    {
      $$ = null;
    }

TypeAnnotations:
  '(' TypeAnnotationList ')'
    {
      C.c.pdebug("TypeAnnotations . ( TypeAnnotationList )");
      $$ = $2;
    }
|
    {
      $$ = null;
    }

TypeAnnotationList:
  TypeAnnotationList TypeAnnotation
    {
      C.c.pdebug("TypeAnnotationList . TypeAnnotationList , TypeAnnotation");
      $$ = $1;
      ((TType)$$).getAnnotations().put($2.getKey(), $2.getValue());
    }
|
    {
      /* Just use a dummy structure to hold the annotations. */
      $$ = new TStruct(C.c.program);
    }

TypeAnnotation:
  tok_identifier '=' tok_literal CommaOrSemicolonOptional
    {
      C.c.pdebug("TypeAnnotation . tok_identifier = tok_literal");
      $$ = new TAnnotation();
      ((TAnnotation)$$).setKey($1);
      ((TAnnotation)$$).setValue($3);
    }

%%

