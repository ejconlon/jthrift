/* The following code was generated by JFlex 1.4.3 on 1/19/12 11:14 AM */

package jthrift;

class sym {
    public static final int EOF = YYParser.EOF;
}

class K {
      static Context c = Context.getInstance();
      static java_cup.runtime.Symbol s(int dex) {
        return new java_cup.runtime.Symbol(dex);
      }
      static java_cup.runtime.Symbol s(int dex,
          java_cup.runtime.YYLVal lv) {
        return new java_cup.runtime.Symbol(dex, lv);
      }
}

/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements. See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership. The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License. You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 * Thrift scanner.
 *
 * Tokenizes a thrift definition file.
 */


/**
 * Helper definitions, comments, constants, and whatnot
 */


class YYLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "1\11\22\0\1\11\1\0\1\21\1\15" +
    "\3\0\1\22\2\16\1\13\1\1\1\16\1\17\1\6\1\12\1\3"+
    "\1\51\1\54\1\53\1\55\1\2\1\52\3\2\5\16\2\0\1\67"+
    "\1\60\1\65\1\64\1\7\1\5\1\61\1\76\1\62\2\20\1\66"+
    "\1\75\1\63\1\74\1\77\1\20\1\71\1\70\1\73\1\72\5\20"+
    "\1\16\1\0\1\16\1\0\1\10\1\0\1\24\1\50\1\36\1\40"+
    "\1\27\1\23\1\45\1\47\1\37\1\42\1\44\1\25\1\34\1\33"+
    "\1\46\1\35\1\57\1\31\1\26\1\30\1\32\1\43\1\56\1\4"+
    "\1\41\1\100\1\16\1\0\1\16\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\5\1\2\2\5\1\1" +
    "\1\2\1\6\1\1\1\3\2\2\26\5\3\0\1\7"+
    "\2\5\1\3\1\0\1\3\1\7\3\5\1\0\1\4"+
    "\2\7\1\0\1\10\1\0\6\5\1\11\51\5\2\11"+
    "\6\5\1\11\20\5\1\3\1\12\1\5\1\3\6\5"+
    "\2\0\1\3\4\5\1\11\11\5\1\13\17\5\1\11"+
    "\23\5\1\14\22\5\1\15\1\16\1\17\2\11\33\5"+
    "\2\0\1\1\1\0\10\5\1\20\13\5\1\11\1\5"+
    "\1\21\5\5\1\22\43\5\1\23\5\5\1\24\1\25"+
    "\12\5\1\0\1\1\3\0\1\26\2\5\1\27\2\5"+
    "\1\30\1\5\1\31\12\5\1\11\4\5\1\32\11\5"+
    "\1\33\27\5\1\0\1\1\1\34\2\0\3\5\1\35"+
    "\1\36\3\5\1\11\2\5\1\37\22\5\1\40\1\5"+
    "\1\41\1\5\1\42\1\43\6\5\1\11\1\5\1\34"+
    "\1\44\2\5\1\45\2\5\1\46\14\5\1\47\15\5"+
    "\1\50\6\5\1\51\6\5\1\52\1\53\7\5\1\54"+
    "\1\5\1\55\1\5\1\56\36\5\1\57\4\5\1\60"+
    "\1\61\3\5\1\62\3\5\1\63\1\5\1\64\1\65"+
    "\3\5\1\66\1\5\1\67\3\5\1\70\6\5\1\71"+
    "\1\5\1\72\1\73\1\5\1\74";

  private static int [] zzUnpackAction() {
    int [] result = new int[576];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\202\0\303\0\u0104\0\u0145\0\u0186" +
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\101\0\u02cb\0\u030c\0\u034d"+
    "\0\u038e\0\u03cf\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555"+
    "\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d"+
    "\0\u079e\0\u07df\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0186"+
    "\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c"+
    "\0\u0b6d\0\u0bae\0\u0bef\0\u0c30\0\u0c71\0\u030c\0\u0cb2\0\u0cf3"+
    "\0\u034d\0\101\0\u038e\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff\0\u1040"+
    "\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207\0\u1248"+
    "\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f\0\u1450"+
    "\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617\0\u1658"+
    "\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f\0\u1860"+
    "\0\u18a1\0\u18e2\0\u1923\0\u0145\0\u1964\0\u19a5\0\u19e6\0\u1a27"+
    "\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u1b6c\0\u1bad\0\u1bee\0\u1c2f"+
    "\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b\0\u0aeb\0\u09a6\0\u1f7c\0\u0b6d"+
    "\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143\0\u2184"+
    "\0\u21c5\0\u2206\0\u2247\0\u2288\0\u22c9\0\u230a\0\u234b\0\u238c"+
    "\0\u23cd\0\u240e\0\u244f\0\u2490\0\u24d1\0\u2512\0\u2553\0\u0145"+
    "\0\u2594\0\u25d5\0\u2616\0\u2657\0\u2698\0\u26d9\0\u271a\0\u275b"+
    "\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u2922\0\u2963"+
    "\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b"+
    "\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2d32\0\u2d73"+
    "\0\u2db4\0\u2df5\0\u2e36\0\u0145\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a"+
    "\0\u2f7b\0\u2fbc\0\u2ffd\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142"+
    "\0\u3183\0\u31c4\0\u3205\0\u3246\0\u3287\0\u32c8\0\u0145\0\u0145"+
    "\0\u0145\0\u3309\0\u334a\0\u338b\0\u33cc\0\u340d\0\u344e\0\u348f"+
    "\0\u34d0\0\u3511\0\u3552\0\u3593\0\u35d4\0\u3615\0\u3656\0\u3697"+
    "\0\u36d8\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u385e\0\u389f"+
    "\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7"+
    "\0\u3ae8\0\u3b29\0\u3b6a\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e\0\u3caf"+
    "\0\u3cf0\0\u3d31\0\u0145\0\u3d72\0\u3db3\0\u3df4\0\u3e35\0\u3e76"+
    "\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d\0\u407e"+
    "\0\u0145\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u0145\0\u4204"+
    "\0\u4245\0\u4286\0\u42c7\0\u4308\0\u4349\0\u438a\0\u43cb\0\u440c"+
    "\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3\0\u4614"+
    "\0\u4655\0\u4696\0\u46d7\0\u4718\0\u4759\0\u479a\0\u47db\0\u481c"+
    "\0\u485d\0\u489e\0\u48df\0\u4920\0\u4961\0\u49a2\0\u49e3\0\u4a24"+
    "\0\u4a65\0\u4aa6\0\u0145\0\u4ae7\0\u4b28\0\u4b69\0\u4baa\0\u4beb"+
    "\0\u0145\0\u0145\0\u4c2c\0\u4c6d\0\u4cae\0\u4cef\0\u4d30\0\u4d71"+
    "\0\u4db2\0\u4df3\0\u4e34\0\u4e75\0\u4eb6\0\101\0\u4ef7\0\u4f38"+
    "\0\u4f79\0\u0145\0\u4fba\0\u4ffb\0\u0145\0\u503c\0\u507d\0\u0145"+
    "\0\u50be\0\u0145\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203\0\u5244"+
    "\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b\0\u544c"+
    "\0\u548d\0\u0145\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613"+
    "\0\u5654\0\u5695\0\u56d6\0\u0145\0\u5717\0\u5758\0\u5799\0\u57da"+
    "\0\u581b\0\u585c\0\u589d\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2"+
    "\0\u5a23\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9\0\u5bea"+
    "\0\u5c2b\0\u5c6c\0\u5cad\0\u5cee\0\u5cee\0\101\0\u5d2f\0\u3ae8"+
    "\0\u5d70\0\u5db1\0\u5df2\0\u0145\0\u0145\0\u5e33\0\u5e74\0\u5eb5"+
    "\0\u5ef6\0\u5f37\0\u5f78\0\u0145\0\u5fb9\0\u5ffa\0\u603b\0\u607c"+
    "\0\u60bd\0\u60fe\0\u613f\0\u6180\0\u61c1\0\u6202\0\u6243\0\u6284"+
    "\0\u62c5\0\u6306\0\u6347\0\u6388\0\u63c9\0\u640a\0\u0145\0\u644b"+
    "\0\u0145\0\u648c\0\u0145\0\u0145\0\u64cd\0\u650e\0\u654f\0\u6590"+
    "\0\u65d1\0\u6612\0\u0bef\0\u6653\0\u3ae8\0\u0145\0\u6694\0\u66d5"+
    "\0\u0145\0\u6716\0\u6757\0\u0145\0\u6798\0\u67d9\0\u681a\0\u685b"+
    "\0\u689c\0\u68dd\0\u691e\0\u695f\0\u69a0\0\u69e1\0\u6a22\0\u6a63"+
    "\0\u0145\0\u6aa4\0\u6ae5\0\u6b26\0\u6b67\0\u6ba8\0\u6be9\0\u6c2a"+
    "\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\u6d6f\0\u6db0\0\u0145\0\u6df1"+
    "\0\u6e32\0\u6e73\0\u6eb4\0\u6ef5\0\u6f36\0\u0145\0\u6f77\0\u6fb8"+
    "\0\u6ff9\0\u703a\0\u707b\0\u70bc\0\u0145\0\u0145\0\u70fd\0\u713e"+
    "\0\u717f\0\u71c0\0\u7201\0\u7242\0\u7283\0\u0145\0\u72c4\0\u0145"+
    "\0\u7305\0\u0145\0\u7346\0\u7387\0\u73c8\0\u7409\0\u744a\0\u748b"+
    "\0\u74cc\0\u750d\0\u754e\0\u758f\0\u75d0\0\u7611\0\u7652\0\u7693"+
    "\0\u76d4\0\u7715\0\u7756\0\u7797\0\u77d8\0\u7819\0\u785a\0\u789b"+
    "\0\u78dc\0\u791d\0\u795e\0\u799f\0\u79e0\0\u7a21\0\u7a62\0\u7aa3"+
    "\0\u0145\0\u7ae4\0\u7b25\0\u7b66\0\u7ba7\0\u0145\0\u0145\0\u7be8"+
    "\0\u7c29\0\u7c6a\0\u0145\0\u7cab\0\u7cec\0\u7d2d\0\u0145\0\u7d6e"+
    "\0\u0145\0\u0145\0\u7daf\0\u7df0\0\u7e31\0\u0145\0\u7e72\0\u0145"+
    "\0\u7eb3\0\u7ef4\0\u7f35\0\u0145\0\u7f76\0\u7fb7\0\u7ff8\0\u8039"+
    "\0\u807a\0\u80bb\0\u0145\0\u80fc\0\u0145\0\u0145\0\u813d\0\u0145";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[576];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\10\1\11" +
    "\1\12\1\13\1\14\1\15\1\13\1\16\1\15\1\17"+
    "\1\7\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\7\1\43\1\44\1\7"+
    "\1\45\5\4\1\46\1\7\1\47\20\7\103\0\2\4"+
    "\2\0\1\50\1\51\17\0\1\51\21\0\5\4\25\0"+
    "\2\4\1\52\1\0\1\50\1\51\17\0\1\51\21\0"+
    "\5\4\25\0\7\7\6\0\1\53\1\7\2\0\3\7"+
    "\1\54\17\7\1\55\32\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\56\7\2\0\2\56\45\0\5\56\24\0"+
    "\1\57\2\60\5\7\6\0\1\61\1\7\2\0\26\7"+
    "\5\60\5\7\1\62\15\7\2\0\6\63\1\64\7\0"+
    "\1\63\2\0\56\63\11\0\1\13\2\0\1\13\76\0"+
    "\1\16\1\65\65\0\14\16\1\0\64\16\2\0\2\66"+
    "\2\53\1\67\1\70\1\53\6\0\2\53\2\0\4\53"+
    "\1\70\21\53\5\66\23\53\21\71\1\72\57\71\22\73"+
    "\1\72\56\73\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\74\1\75\4\7\1\76\4\7\1\77\6\7"+
    "\1\100\32\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\2\7\1\101\1\102\2\7\1\103\1\7\1\104\14\7"+
    "\1\105\30\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\106\12\7\1\107\41\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\2\7\1\110\1\7\1\111\1\112"+
    "\1\7\1\113\1\7\1\114\2\7\1\115\1\7\1\116"+
    "\14\7\1\117\22\7\1\0\1\57\2\60\1\120\4\7"+
    "\6\0\1\61\1\7\2\0\2\7\1\121\5\7\1\122"+
    "\15\7\5\60\23\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\6\7\1\123\7\7\1\124\5\7\1\125\31\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\1\7\1\126"+
    "\2\7\1\127\2\7\1\130\46\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\3\7\1\131\4\7\1\132\45\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\1\7\1\133"+
    "\2\7\1\134\7\7\1\135\6\7\1\136\32\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\7\1\137\21\7"+
    "\1\140\32\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\141\2\7\1\142\1\7\1\143\1\144\6\7"+
    "\1\145\5\7\1\146\31\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\7\1\147\1\150\1\151\6\7\1\152"+
    "\10\7\1\153\32\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\154\2\7\1\154\4\7\1\155\1\156\14\7"+
    "\1\157\1\160\1\161\25\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\162\11\7\1\163\4\7\1\164"+
    "\32\7\2\0\7\7\6\0\1\53\1\7\2\0\14\7"+
    "\1\165\41\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\166\54\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\55\12\7\1\167\6\7\1\170\32\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\2\7\1\171"+
    "\20\7\1\172\32\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\6\7\1\154\1\7\1\173\1\7\1\174\43\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\175"+
    "\1\7\1\176\5\7\1\177\1\7\1\200\4\7\1\201"+
    "\32\7\2\0\7\7\6\0\1\53\1\7\2\0\14\7"+
    "\1\202\7\7\1\203\31\7\2\0\5\7\1\204\1\7"+
    "\6\0\1\53\1\7\2\0\56\7\1\0\1\57\2\205"+
    "\13\0\1\57\31\0\5\205\25\0\2\206\1\0\1\206"+
    "\1\0\1\206\13\0\2\206\2\0\1\206\6\0\1\206"+
    "\1\0\1\206\7\0\6\206\2\0\1\206\3\0\2\206"+
    "\1\0\1\206\13\0\7\53\6\0\2\53\2\0\56\53"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\15\7\1\207"+
    "\40\7\2\0\7\7\6\0\1\53\1\7\2\0\6\7"+
    "\1\154\47\7\2\0\2\56\3\0\1\51\17\0\1\51"+
    "\21\0\5\56\25\0\2\205\45\0\5\205\25\0\2\60"+
    "\5\7\6\0\1\53\1\7\2\0\26\7\5\60\23\7"+
    "\2\0\2\210\5\53\6\0\2\53\2\0\26\53\5\210"+
    "\23\53\2\0\7\7\6\0\1\53\1\7\2\0\41\7"+
    "\1\154\14\7\2\0\7\63\7\0\1\63\2\0\56\63"+
    "\2\0\3\63\1\211\3\63\7\0\1\63\2\0\40\63"+
    "\1\212\1\213\1\214\1\215\6\63\1\216\3\63\13\217"+
    "\1\220\65\217\2\0\2\221\5\53\6\0\2\53\2\0"+
    "\26\53\5\221\23\53\1\0\1\57\2\210\5\53\6\0"+
    "\1\61\1\53\2\0\26\53\5\210\23\53\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\2\7\1\222\53\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\23\7\1\223\32\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\10\7\1\224"+
    "\45\7\2\0\7\7\6\0\1\53\1\7\2\0\10\7"+
    "\1\225\45\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\6\7\1\226\47\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\14\7\1\227\41\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\3\7\1\230\12\7\1\231\37\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\22\7\1\232\33\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\15\7\1\154"+
    "\40\7\2\0\7\7\6\0\1\53\1\7\2\0\3\7"+
    "\1\233\52\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\11\7\1\234\44\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\3\7\1\235\52\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\14\7\1\236\41\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\2\7\1\237\2\7\1\240\1\241"+
    "\1\7\1\242\45\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\243\4\7\1\244\47\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\12\7\1\245\43\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\7\1\246\54\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\55\7\1\247"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\10\7\1\250"+
    "\45\7\2\0\7\7\6\0\1\53\1\7\2\0\14\7"+
    "\1\251\41\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\4\7\1\252\1\253\5\7\1\254\42\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\3\7\1\255\10\7\1\237"+
    "\41\7\2\0\7\7\6\0\1\53\1\7\2\0\3\7"+
    "\1\256\3\7\1\257\5\7\1\260\40\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\1\7\1\261\5\7\1\262"+
    "\6\7\1\154\37\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\12\7\1\263\43\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\264\1\7\1\265\5\7\1\232"+
    "\41\7\2\0\7\7\6\0\1\53\1\7\2\0\14\7"+
    "\1\266\41\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\3\7\1\267\1\7\1\270\7\7\1\271\4\7\1\272"+
    "\11\7\1\273\21\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\25\7\1\274\30\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\154\51\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\2\7\1\275\1\276\1\7\1\277"+
    "\6\7\1\300\1\301\40\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\5\7\1\302\3\7\1\303\44\7\2\0"+
    "\2\7\1\136\4\7\6\0\1\53\1\7\2\0\33\7"+
    "\1\154\22\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\2\7\1\154\53\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\5\7\1\154\50\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\12\7\1\304\43\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\15\7\1\305\40\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\3\7\1\232\52\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\6\7\1\306\47\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\14\7\1\307"+
    "\6\7\1\310\32\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\25\7\1\311\30\7\2\0\6\7\1\312\6\0"+
    "\1\53\1\7\2\0\56\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\12\7\1\313\43\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\3\7\1\131\1\7\1\314\50\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\1\7\1\141"+
    "\21\7\1\315\32\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\24\7\1\316\31\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\12\7\1\317\43\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\10\7\1\320\2\7\1\321\42\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\2\7\1\322"+
    "\1\323\1\7\1\324\5\7\1\325\42\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\12\7\1\326\43\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\27\7\1\327\26\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\32\7\1\330"+
    "\23\7\2\0\7\7\6\0\1\53\1\7\2\0\31\7"+
    "\1\331\24\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\332\1\7\1\333\10\7\1\334\42\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\10\7\1\335\45\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\7\7\1\336\46\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\337"+
    "\51\7\2\0\7\7\6\0\1\53\1\7\2\0\20\7"+
    "\1\340\35\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\6\7\1\341\47\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\2\7\1\342\11\7\1\343\41\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\23\7\1\344\32\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\5\7\1\271\50\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\345"+
    "\51\7\2\0\7\7\6\0\1\53\1\7\2\0\5\7"+
    "\1\346\50\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\22\7\1\347\33\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\350\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\10\7\1\351\45\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\5\7\1\352\50\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\23\7\1\353\32\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\5\7\1\354\50\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\264"+
    "\7\7\1\355\41\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\36\7\1\356\17\7\2\0\6\7\1\357\6\0"+
    "\1\53\1\7\2\0\56\7\2\0\7\63\7\0\1\63"+
    "\2\0\37\63\1\360\7\63\1\361\6\63\2\0\7\63"+
    "\7\0\1\63\2\0\44\63\1\362\11\63\2\0\7\63"+
    "\7\0\1\63\2\0\37\63\1\363\16\63\2\0\7\63"+
    "\7\0\1\63\2\0\43\63\1\364\12\63\2\0\7\63"+
    "\7\0\1\63\2\0\37\63\1\365\16\63\2\0\5\63"+
    "\1\366\1\63\7\0\1\63\2\0\56\63\13\217\1\367"+
    "\65\217\12\370\1\371\1\372\65\370\2\0\2\221\3\53"+
    "\1\70\1\53\6\0\2\53\2\0\4\53\1\70\21\53"+
    "\5\221\23\53\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\3\7\1\373\52\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\136\54\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\13\7\1\374\42\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\1\7\1\375\54\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\4\7\1\376\51\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\7\1\232\54\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\377"+
    "\51\7\2\0\7\7\6\0\1\53\1\7\2\0\10\7"+
    "\1\u0100\45\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\3\7\1\154\52\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\5\7\1\u0101\50\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\25\7\1\u0102\30\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\5\7\1\u0103\50\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\3\7\1\u0104\52\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\154\55\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\20\7\1\u0105\35\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\7\7\1\u0106"+
    "\46\7\2\0\7\7\6\0\1\53\1\7\2\0\5\7"+
    "\1\u0107\50\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\7\7\1\u0108\4\7\1\u0109\41\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\55\51\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\2\7\1\u010a\53\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\4\7\1\u010b\51\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\13\7\1\u010c"+
    "\42\7\2\0\7\7\6\0\1\53\1\7\2\0\5\7"+
    "\1\314\50\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\13\7\1\154\42\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\u010d\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\u010e\51\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\u010f\7\7\1\237\41\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\7\7\1\u0110"+
    "\46\7\2\0\7\7\6\0\1\53\1\7\2\0\11\7"+
    "\1\u0111\44\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\u0112\2\7\1\u0113\10\7\1\237\1\u0114\15\7\1\u0115"+
    "\22\7\2\0\7\7\6\0\1\53\1\7\2\0\10\7"+
    "\1\u0116\45\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\4\7\1\u0117\51\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\u0118\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\10\7\1\154\45\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\23\7\1\u0119\32\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\3\7\1\131\52\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\13\7\1\u011a\42\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\6\7\1\u011b"+
    "\1\u011c\46\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\23\7\1\154\32\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\14\7\1\u011d\41\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\7\7\1\u011e\46\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\16\7\1\u011f\37\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\4\7\1\141\51\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\14\7\1\u0120\41\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\14\7\1\135"+
    "\41\7\2\0\7\7\6\0\1\53\1\7\2\0\23\7"+
    "\1\u0121\32\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\4\7\1\237\51\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\14\7\1\u0122\41\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\u0123\51\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\7\7\1\355\46\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\2\7\1\u0124\53\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\10\7\1\136\7\7"+
    "\1\u0125\35\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\5\7\1\u0126\50\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\2\7\1\u0107\53\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\11\7\1\u0127\44\7\2\0\6\7\1\u0128"+
    "\6\0\1\53\1\7\2\0\56\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\13\7\1\354\42\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\10\7\1\131\45\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\7\1\u0129\54\7"+
    "\2\0\6\7\1\u012a\6\0\1\53\1\7\2\0\56\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\3\7\1\u012b"+
    "\1\7\1\u012c\50\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\23\7\1\u012d\32\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\14\7\1\315\41\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\5\7\1\u012e\50\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\4\7\1\u012f\51\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\2\7\1\u0130\53\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\2\7\1\u0131"+
    "\20\7\1\377\32\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\u0132\54\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\u0133\5\7\1\u0134\43\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\2\7\1\u0135\53\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\1\7\1\u0136"+
    "\54\7\2\0\7\7\6\0\1\53\1\7\2\0\25\7"+
    "\1\u0137\30\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\2\7\1\104\53\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\u0138\54\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\5\7\1\u0139\50\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\1\7\1\u013a\54\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\15\7\1\u013b\40\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\25\7\1\u013c\30\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\33\7\1\u013d"+
    "\22\7\2\0\7\7\6\0\1\53\1\7\2\0\14\7"+
    "\1\u013e\41\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\14\7\1\264\41\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\u013f\54\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\7\1\u0140\54\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\u0141\51\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\2\7\1\u0142\53\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\24\7\1\154\31\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\2\7\1\131"+
    "\53\7\2\0\7\7\6\0\1\53\1\7\2\0\37\7"+
    "\1\u0143\16\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\u0144\6\7\1\u0145\12\7\1\u0146\32\7\2\0"+
    "\7\63\7\0\1\63\2\0\43\63\1\u0147\12\63\2\0"+
    "\7\63\7\0\1\63\2\0\40\63\1\u0148\15\63\2\0"+
    "\7\63\7\0\1\63\2\0\52\63\1\u0149\3\63\2\0"+
    "\7\63\7\0\1\63\2\0\46\63\1\u014a\7\63\2\0"+
    "\7\63\7\0\1\63\2\0\44\63\1\u014b\11\63\2\0"+
    "\7\63\7\0\1\63\2\0\40\63\1\u0147\15\63\2\0"+
    "\7\63\7\0\1\63\2\0\50\63\1\u014c\5\63\12\u014d"+
    "\1\u014e\1\u014f\65\u014d\13\370\1\u0150\65\370\12\0\1\u0151"+
    "\66\0\12\u0151\1\u014e\1\220\65\u0151\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\u0152\51\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\5\7\1\u0153\50\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\2\7\1\u0154\53\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\1\7\1\314"+
    "\54\7\2\0\7\7\6\0\1\53\1\7\2\0\6\7"+
    "\1\136\47\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\13\7\1\u0155\42\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\6\7\1\u0156\47\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\15\7\1\u0157\40\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\5\7\1\u0158\50\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\14\7\1\u0159\41\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\11\7\1\u015a\44\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\14\7\1\252"+
    "\41\7\2\0\7\7\6\0\1\53\1\7\2\0\13\7"+
    "\1\u015b\42\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\10\7\1\u015c\45\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\2\7\1\u015d\53\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\23\7\1\237\32\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\24\7\1\u015e\31\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\10\7\1\u015f\45\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\12\7\1\u0160\43\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\14\7\1\237"+
    "\41\7\2\0\7\7\6\0\1\53\1\7\2\0\6\7"+
    "\1\131\47\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\23\7\1\100\32\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\33\7\1\117\22\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\u0161\51\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\24\7\1\u0162\31\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\3\7\1\u0163\52\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\15\7\1\u0164\40\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\33\7\1\u0165"+
    "\22\7\2\0\7\7\6\0\1\53\1\7\2\0\7\7"+
    "\1\131\46\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\16\7\1\154\37\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\6\7\1\264\47\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\3\7\1\u0166\52\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\14\7\1\u0167\41\7\2\0\6\7"+
    "\1\u0168\6\0\1\53\1\7\2\0\56\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\22\7\1\u0169\33\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\10\7\1\u016a\45\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\20\7\1\131"+
    "\35\7\2\0\7\7\6\0\1\53\1\7\2\0\3\7"+
    "\1\u016b\52\7\2\0\6\7\1\u016c\6\0\1\53\1\7"+
    "\2\0\56\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\u0133\54\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\u016d\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\23\7\1\u016e\32\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\10\7\1\u016f\45\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\6\7\1\u0170\47\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\5\7\1\u0171\2\7"+
    "\1\u0172\3\7\1\u0173\41\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\5\7\1\u0174\50\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\14\7\1\u0175\41\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\1\7\1\u0176\54\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\7\1\u0177\54\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\6\7\1\u0178"+
    "\47\7\2\0\7\7\6\0\1\53\1\7\2\0\7\7"+
    "\1\u0179\46\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\4\7\1\u017a\51\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\7\7\1\u017b\46\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\5\7\1\131\50\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\24\7\1\u017c\31\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\1\7\1\u0110\54\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\11\7\1\u0107\44\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\2\7\1\u017d"+
    "\53\7\2\0\6\7\1\u017e\6\0\1\53\1\7\2\0"+
    "\56\7\2\0\7\7\6\0\1\53\1\7\2\0\7\7"+
    "\1\u013c\46\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\5\7\1\u0162\50\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\135\54\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\7\1\u017f\54\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\23\7\1\u0180\32\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\21\7\1\154\34\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\6\7\1\u0181\47\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\40\7\1\154"+
    "\15\7\2\0\7\7\6\0\1\53\1\7\2\0\2\7"+
    "\1\u0182\2\7\1\u0183\50\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\7\1\u0184\12\7\1\u0185\41\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\12\7\1\u0186\43\7"+
    "\2\0\5\63\1\u014a\1\63\7\0\1\63\2\0\56\63"+
    "\2\0\7\63\7\0\1\63\2\0\42\63\1\u0187\13\63"+
    "\2\0\5\63\1\u0188\1\63\7\0\1\63\2\0\56\63"+
    "\2\0\6\63\1\u0189\7\0\1\63\2\0\56\63\2\0"+
    "\7\63\7\0\1\63\2\0\45\63\1\u018a\10\63\2\0"+
    "\7\63\7\0\1\63\2\0\53\63\1\u018b\2\63\12\217"+
    "\1\u018c\1\367\77\217\1\u018d\1\367\65\217\12\u0151\1\u018e"+
    "\1\u018f\65\u0151\12\370\1\u0190\1\u0150\65\370\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\14\7\1\u0191\41\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\2\7\1\u011b\53\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\1\7\1\u0192"+
    "\54\7\2\0\7\7\6\0\1\53\1\7\2\0\1\7"+
    "\1\154\54\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\13\7\1\u0193\42\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\5\7\1\u0194\50\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\22\7\1\u0195\33\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\5\7\1\u0196\50\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\6\7\1\u0197\47\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\15\7\1\u0198\40\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\5\7\1\u0199"+
    "\50\7\2\0\7\7\6\0\1\53\1\7\2\0\13\7"+
    "\1\334\42\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\14\7\1\355\41\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\14\7\1\u019a\41\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\u019b\51\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\3\7\1\u019c\52\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\5\7\1\245\50\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\6\7\1\u019d\47\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\10\7\1\u019e"+
    "\45\7\2\0\7\7\6\0\1\53\1\7\2\0\10\7"+
    "\1\u019f\45\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\12\7\1\u01a0\43\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\12\7\1\u01a1\43\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\13\7\1\u01a2\42\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\15\7\1\u01a3\40\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\1\7\1\u01a4\54\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\12\7\1\u01a5\43\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\16\7\1\u01a6"+
    "\37\7\2\0\7\7\6\0\1\53\1\7\2\0\1\7"+
    "\1\u01a7\54\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\10\7\1\u01a8\45\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\10\7\1\u011a\45\7\2\0\6\7\1\u01a9\6\0"+
    "\1\53\1\7\2\0\56\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\10\7\1\u01aa\45\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\1\u01ab\55\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\15\7\1\u01ac\40\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\11\7\1\u01ad\44\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\2\7\1\136\53\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\14\7\1\u01ae"+
    "\41\7\2\0\7\7\6\0\1\53\1\7\2\0\4\7"+
    "\1\u01af\51\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\12\7\1\u01b0\43\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\16\7\1\u01b1\37\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\10\7\1\u01b2\45\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\16\7\1\u01b3\37\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\2\7\1\u01b4\53\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\5\7\1\u01b5\50\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\11\7\1\u01b6"+
    "\44\7\2\0\7\7\6\0\1\53\1\7\2\0\2\7"+
    "\1\u01b7\53\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\5\7\1\u01b8\50\7\2\0\7\63\7\0\1\63\2\0"+
    "\50\63\1\u01b9\5\63\2\0\7\63\7\0\1\63\2\0"+
    "\45\63\1\u01ba\10\63\2\0\6\63\1\u01bb\7\0\1\63"+
    "\2\0\56\63\2\0\7\63\7\0\1\63\2\0\45\63"+
    "\1\u014a\10\63\2\0\7\63\7\0\1\63\2\0\51\63"+
    "\1\u01bc\4\63\12\0\1\u014d\66\0\12\370\1\u01bd\1\u0150"+
    "\65\370\2\0\7\7\6\0\1\53\1\7\2\0\23\7"+
    "\1\264\32\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\13\7\1\136\42\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\u01be\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\7\1\u01bf\54\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\23\7\1\u01c0\32\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\3\7\1\u01c1\52\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\14\7\1\u01c2\41\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\u01c3"+
    "\51\7\2\0\7\7\6\0\1\53\1\7\2\0\1\u01c4"+
    "\55\7\2\0\7\7\6\0\1\53\1\7\2\0\4\7"+
    "\1\u01c5\51\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\u01c6\54\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\104\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\7\1\u01c7\54\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\1\7\1\u01c8\54\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\5\7\1\u019f\50\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\7\7\1\u01c9\46\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\11\7\1\u01ca"+
    "\44\7\2\0\6\7\1\u01cb\6\0\1\53\1\7\2\0"+
    "\56\7\2\0\7\7\6\0\1\53\1\7\2\0\12\7"+
    "\1\u01cc\43\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\11\7\1\u01cd\44\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\13\7\1\u01ce\42\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\12\7\1\u01cf\43\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\13\7\1\247\42\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\1\7\1\u01d0\54\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\4\7\1\u01d1\51\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\u01d2"+
    "\51\7\2\0\6\7\1\u01d3\6\0\1\53\1\7\2\0"+
    "\56\7\2\0\7\7\6\0\1\53\1\7\2\0\1\7"+
    "\1\u01d4\54\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\u01d5\54\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\6\7\1\u01d6\47\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\u01d7\51\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\2\7\1\u01d8\53\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\14\7\1\u01d9\41\7\2\0"+
    "\7\63\7\0\1\63\2\0\37\63\1\u01da\16\63\2\0"+
    "\7\63\7\0\1\63\2\0\54\63\1\u01db\1\63\2\0"+
    "\7\63\7\0\1\63\2\0\41\63\1\u014a\14\63\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\2\7\1\u01dc\53\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\10\7\1\u01dd"+
    "\45\7\2\0\7\7\6\0\1\53\1\7\2\0\23\7"+
    "\1\u01de\32\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\10\7\1\136\45\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\15\7\1\u01df\40\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\11\7\1\u01e0\44\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\13\7\1\u01e1\42\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\13\7\1\u01e2\42\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\2\7\1\u01e3\53\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\u01e4"+
    "\51\7\2\0\7\7\6\0\1\53\1\7\2\0\10\7"+
    "\1\u01e5\45\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\4\7\1\u01e6\51\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\u01e7\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\2\7\1\u01e8\53\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\6\7\1\u01e9\47\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\13\7\1\131\42\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\10\7\1\u01ea\45\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\10\7\1\u01eb"+
    "\45\7\2\0\7\7\6\0\1\53\1\7\2\0\13\7"+
    "\1\u01ec\42\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\2\7\1\u01ed\53\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\3\7\1\u01ee\52\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\3\7\1\u01ef\52\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\1\7\1\u01f0\54\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\23\7\1\u01f1\32\7\2\0"+
    "\7\63\7\0\1\63\2\0\51\63\1\u01f2\4\63\2\0"+
    "\7\63\7\0\1\63\2\0\44\63\1\u01f3\11\63\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\21\7\1\u01f4\34\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\14\7\1\u01f5"+
    "\41\7\2\0\7\7\6\0\1\53\1\7\2\0\10\7"+
    "\1\u01f6\45\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\4\7\1\u01f7\51\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\u01f8\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\21\7\1\u01f9\34\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\u01fa\51\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\3\7\1\u01fb\52\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\7\1\u01fc\54\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\3\7\1\u01fd"+
    "\52\7\2\0\7\7\6\0\1\53\1\7\2\0\7\7"+
    "\1\u01fe\46\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\4\7\1\u01ff\51\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\5\7\1\232\50\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\7\1\u0200\54\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\21\7\1\u0201\34\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\12\7\1\u0202\43\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\25\7\1\u0203\30\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\10\7\1\u0204"+
    "\45\7\2\0\7\63\7\0\1\63\2\0\40\63\1\u014a"+
    "\15\63\2\0\7\63\7\0\1\63\2\0\42\63\1\u0147"+
    "\13\63\2\0\6\7\1\u0205\6\0\1\53\1\7\2\0"+
    "\56\7\2\0\7\7\6\0\1\53\1\7\2\0\55\7"+
    "\1\u019f\2\0\7\7\6\0\1\53\1\7\2\0\3\7"+
    "\1\u0206\52\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\u0207\54\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\12\7\1\u0208\43\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\11\7\1\u0209\44\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\12\7\1\u020a\43\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\15\7\1\u020b\40\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\u020c\55\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\11\7\1\u020d\44\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\1\7\1\u020e"+
    "\54\7\2\0\7\7\6\0\1\53\1\7\2\0\1\7"+
    "\1\u020f\54\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\2\7\1\u0210\53\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\u0211\54\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\12\7\1\u0212\1\u0213\42\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\12\7\1\u0214\43\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\22\7\1\u0215\33\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\1\7\1\u0216"+
    "\54\7\2\0\7\7\6\0\1\53\1\7\2\0\4\7"+
    "\1\u0217\51\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\1\7\1\u0218\54\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\u0219\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\14\7\1\u021a\41\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\u021b\51\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\22\7\1\u021c\33\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\13\7\1\u021d\42\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\u021e"+
    "\51\7\2\0\7\7\6\0\1\53\1\7\2\0\2\7"+
    "\1\u021f\53\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\6\7\1\u0220\47\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\1\7\1\u0221\54\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\7\1\u0222\54\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\u0223\51\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\13\7\1\u0224\42\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\3\7\1\u0225\52\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\13\7\1\u0226"+
    "\42\7\2\0\2\7\1\u0227\4\7\6\0\1\53\1\7"+
    "\2\0\56\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\3\7\1\u0228\52\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\4\7\1\u0229\51\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\u022a\51\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\u022b\51\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\5\7\1\u022c\50\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\13\7\1\u022d\42\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\4\7\1\u022e"+
    "\51\7\2\0\7\7\6\0\1\53\1\7\2\0\12\7"+
    "\1\u022f\43\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\4\7\1\u0230\51\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\12\7\1\u0231\43\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\1\u0232\55\7\2\0\7\7\6\0\1\53"+
    "\1\7\2\0\4\7\1\u0233\51\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\4\7\1\u0234\51\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\1\7\1\u0235\54\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\1\7\1\u0236\54\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\14\7\1\u0237"+
    "\41\7\2\0\7\7\6\0\1\53\1\7\2\0\22\7"+
    "\1\u0238\33\7\2\0\7\7\6\0\1\53\1\7\2\0"+
    "\13\7\1\u0239\42\7\2\0\7\7\6\0\1\53\1\7"+
    "\2\0\13\7\1\u023a\42\7\2\0\2\7\1\u023b\4\7"+
    "\6\0\1\53\1\7\2\0\56\7\2\0\7\7\6\0"+
    "\1\53\1\7\2\0\23\7\1\u023c\32\7\2\0\7\7"+
    "\6\0\1\53\1\7\2\0\4\7\1\u023d\51\7\2\0"+
    "\7\7\6\0\1\53\1\7\2\0\4\7\1\u023e\51\7"+
    "\2\0\7\7\6\0\1\53\1\7\2\0\6\7\1\u023f"+
    "\47\7\2\0\7\7\6\0\1\53\1\7\2\0\16\7"+
    "\1\u0240\37\7";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33150];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
          "",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\11\32\1\3\0\4\1\1\0" +
    "\5\1\1\0\3\1\1\0\1\11\1\0\123\1\2\0"+
    "\146\1\2\0\1\1\1\0\122\1\1\0\1\11\3\0"+
    "\72\1\1\0\1\1\1\11\2\0\260\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[576];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  YYLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  YYLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { /* do nothing */
          }
        case 61: break;
        case 6: 
          { return K.s(yytext().charAt(0));
          }
        case 62: break;
        case 44: 
          { return K.s(YYParser.tok_xception);
          }
        case 63: break;
        case 10: 
          { return K.s(YYParser.tok_int_constant,
      new java_cup.runtime.YYLVal(Long.parseLong(yytext().substring(2), 16)));
          }
        case 64: break;
        case 9: 
          { K.c.thriftReservedKeyword(yytext());
          }
        case 65: break;
        case 41: 
          { return K.s(YYParser.tok_cpp_type);
          }
        case 66: break;
        case 37: 
          { return K.s(YYParser.tok_extends);
          }
        case 67: break;
        case 24: 
          { return K.s(YYParser.tok_slist);
          }
        case 68: break;
        case 19: 
          { return K.s(YYParser.tok_void);
          }
        case 69: break;
        case 28: 
          { /* This does not show up in the parse tree. */
 /* Rather, the parser will grab it out of the global. */
  if (K.c.parseMode == Context.ParseMode.PROGRAM) {
    K.c.clear_doctext();
    K.c.doctext = new DText(yytext());
    K.c.doctextLineno = yyline;
  }
          }
        case 70: break;
        case 38: 
          { return K.s(YYParser.tok_typedef);
          }
        case 71: break;
        case 47: 
          { return K.s(YYParser.tok_cpp_include);
          }
        case 72: break;
        case 26: 
          { return K.s(YYParser.tok_union);
          }
        case 73: break;
        case 46: 
          { return K.s(YYParser.tok_py_module);
          }
        case 74: break;
        case 18: 
          { return K.s(YYParser.tok_int_constant, new java_cup.runtime.YYLVal(1));
          }
        case 75: break;
        case 27: 
          { return K.s(YYParser.tok_const);
          }
        case 76: break;
        case 55: 
          { return K.s(YYParser.tok_cpp_namespace);
          }
        case 77: break;
        case 39: 
          { return K.s(YYParser.tok_include);
          }
        case 78: break;
        case 12: 
          { return K.s(YYParser.tok_map);
          }
        case 79: break;
        case 32: 
          { return K.s(YYParser.tok_double);
          }
        case 80: break;
        case 29: 
          { return K.s(YYParser.tok_struct);
          }
        case 81: break;
        case 33: 
          { return K.s(YYParser.tok_oneway);
          }
        case 82: break;
        case 60: 
          { return K.s(YYParser.tok_smalltalk_category);
          }
        case 83: break;
        case 31: 
          { return K.s(YYParser.tok_throws);
          }
        case 84: break;
        case 56: 
          { return K.s(YYParser.tok_ruby_namespace);
          }
        case 85: break;
        case 35: 
          { return K.s(YYParser.tok_xsd_all);
          }
        case 86: break;
        case 50: 
          { return K.s(YYParser.tok_perl_package);
          }
        case 87: break;
        case 54: 
          { return K.s(YYParser.tok_php_namespace);
          }
        case 88: break;
        case 21: 
          { return K.s(YYParser.tok_bool);
          }
        case 89: break;
        case 42: 
          { return K.s(YYParser.tok_optional);
          }
        case 90: break;
        case 13: 
          { return K.s(YYParser.tok_i16);
          }
        case 91: break;
        case 48: 
          { return K.s(YYParser.tok_xsd_nillable);
          }
        case 92: break;
        case 58: 
          { return K.s(YYParser.tok_csharp_namespace);
          }
        case 93: break;
        case 3: 
          { return K.s(YYParser.tok_dub_constant,
      new java_cup.runtime.YYLVal(Double.parseDouble(yytext())));
          }
        case 94: break;
        case 20: 
          { return K.s(YYParser.tok_byte);
          }
        case 95: break;
        case 40: 
          { return K.s(YYParser.tok_required);
          }
        case 96: break;
        case 57: 
          { return K.s(YYParser.tok_smalltalk_prefix);
          }
        case 97: break;
        case 52: 
          { return K.s(YYParser.tok_java_package);
          }
        case 98: break;
        case 17: 
          { return K.s(YYParser.tok_enum);
          }
        case 99: break;
        case 23: 
          { K.c.pwarning(0, "ow.\n");
  return K.s(YYParser.tok_oneway);
          }
        case 100: break;
        case 4: 
          { return K.s(YYParser.tok_int_constant,
      new java_cup.runtime.YYLVal(Long.parseLong(yytext())));
          }
        case 101: break;
        case 30: 
          { return K.s(YYParser.tok_string);
          }
        case 102: break;
        case 7: 
          { return K.s(YYParser.tok_st_identifier,
      new java_cup.runtime.YYLVal(yytext()));
          }
        case 103: break;
        case 5: 
          { return K.s(YYParser.tok_identifier,
      new java_cup.runtime.YYLVal(yytext()));
          }
        case 104: break;
        case 59: 
          { return K.s(YYParser.tok_delphi_namespace);
          }
        case 105: break;
        case 51: 
          { return K.s(YYParser.tok_cocoa_prefix);
          }
        case 106: break;
        case 14: 
          { return K.s(YYParser.tok_i64);
          }
        case 107: break;
        case 15: 
          { return K.s(YYParser.tok_i32);
          }
        case 108: break;
        case 45: 
          { return K.s(YYParser.tok_namespace);
          }
        case 109: break;
        case 25: 
          { return K.s(YYParser.tok_senum);
          }
        case 110: break;
        case 11: 
          { return K.s(YYParser.tok_set);
          }
        case 111: break;
        case 22: 
          { return K.s(YYParser.tok_int_constant, new java_cup.runtime.YYLVal(0));
          }
        case 112: break;
        case 49: 
          { return K.s(YYParser.tok_xsd_optional);
          }
        case 113: break;
        case 53: 
          { return K.s(YYParser.tok_xsd_namespace);
          }
        case 114: break;
        case 8: 
          { return K.s(YYParser.tok_literal,
      new java_cup.runtime.YYLVal(yytext()));
          }
        case 115: break;
        case 43: 
          { return K.s(YYParser.tok_xsd_attrs);
          }
        case 116: break;
        case 16: 
          { return K.s(YYParser.tok_list);
          }
        case 117: break;
        case 2: 
          { K.c.unexpectedToken(yytext());
          }
        case 118: break;
        case 36: 
          { return K.s(YYParser.tok_service);
          }
        case 119: break;
        case 34: 
          { return K.s(YYParser.tok_binary);
          }
        case 120: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
